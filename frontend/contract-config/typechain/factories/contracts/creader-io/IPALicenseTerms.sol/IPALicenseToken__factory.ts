/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  IPALicenseToken,
  IPALicenseTokenInterface,
} from "../../../../contracts/creader-io/IPALicenseTerms.sol/IPALicenseToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "ipAssetRegistry",
        type: "address",
      },
      {
        internalType: "address",
        name: "licensingModule",
        type: "address",
      },
      {
        internalType: "address",
        name: "pilTemplate",
        type: "address",
      },
      {
        internalType: "address",
        name: "bodhi",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "BODHI",
    outputs: [
      {
        internalType: "contract IBodhi",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "IP_ASSET_REGISTRY",
    outputs: [
      {
        internalType: "contract IPAssetRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "LICENSING_MODULE",
    outputs: [
      {
        internalType: "contract LicensingModule",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PIL_TEMPLATE",
    outputs: [
      {
        internalType: "contract PILicenseTemplate",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "assetId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "licenseTermsId",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "ltRecipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "remixType",
        type: "uint256",
      },
    ],
    name: "mintLicenseToken",
    outputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "startLicenseTokenId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "remixTypes",
    outputs: [
      {
        internalType: "enum IPALicenseToken.RemixType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101006040523480156200001257600080fd5b5060405162000e8538038062000e8583398181016040528101906200003891906200017c565b8373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff168152505050505050620001ee565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001448262000117565b9050919050565b620001568162000137565b81146200016257600080fd5b50565b60008151905062000176816200014b565b92915050565b6000806000806080858703121562000199576200019862000112565b5b6000620001a98782880162000165565b9450506020620001bc8782880162000165565b9350506040620001cf8782880162000165565b9250506060620001e28782880162000165565b91505092959194509250565b60805160a05160c05160e051610c3a6200024b60003960006101ae01526000818161014201528181610296015261034501526000818161018a015281816102590152818161030801526104a8015260006101660152610c3a6000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806312c4ce881461006757806341c782c51461008557806365165aa5146100a35780636680e4bd146100c1578063975d81dc146100df5780639fde8cfd1461010f575b600080fd5b61006f610140565b60405161007c91906105c0565b60405180910390f35b61008d610164565b60405161009a91906105fc565b60405180910390f35b6100ab610188565b6040516100b89190610638565b60405180910390f35b6100c96101ac565b6040516100d69190610674565b60405180910390f35b6100f960048036038101906100f49190610708565b6101d0565b60405161010691906107bf565b60405180910390f35b61012960048036038101906101249190610813565b6101ff565b60405161013792919061089d565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60008060038081111561021557610214610748565b5b831115610257576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024e90610923565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632a4130c0877f0000000000000000000000000000000000000000000000000000000000000000886040518463ffffffff1660e01b81526004016102d493929190610983565b600060405180830381600087803b1580156102ee57600080fd5b505af1158015610302573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630672a3bf877f0000000000000000000000000000000000000000000000000000000000000000886001896040518663ffffffff1660e01b8152600401610388959493929190610a2c565b6020604051808303816000875af11580156103a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cb9190610aa7565b90508260038111156103e0576103df610748565b5b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff0219169083600381111561045157610450610748565b5b021790555060008560ff1667ffffffffffffffff81111561047557610474610ad4565b5b6040519080825280602002602001820160405280156104a35781602001602082028036833780820191505090505b5090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166312af7ef688836040518363ffffffff1660e01b8152600401610501929190610bc1565b600060405180830381600087803b15801561051b57600080fd5b505af115801561052f573d6000803e3d6000fd5b50505050819250509550959350505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061058661058161057c84610541565b610561565b610541565b9050919050565b60006105988261056b565b9050919050565b60006105aa8261058d565b9050919050565b6105ba8161059f565b82525050565b60006020820190506105d560008301846105b1565b92915050565b60006105e68261058d565b9050919050565b6105f6816105db565b82525050565b600060208201905061061160008301846105ed565b92915050565b60006106228261058d565b9050919050565b61063281610617565b82525050565b600060208201905061064d6000830184610629565b92915050565b600061065e8261058d565b9050919050565b61066e81610653565b82525050565b60006020820190506106896000830184610665565b92915050565b600080fd5b600061069f82610541565b9050919050565b6106af81610694565b81146106ba57600080fd5b50565b6000813590506106cc816106a6565b92915050565b6000819050919050565b6106e5816106d2565b81146106f057600080fd5b50565b600081359050610702816106dc565b92915050565b6000806040838503121561071f5761071e61068f565b5b600061072d858286016106bd565b925050602061073e858286016106f3565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061078857610787610748565b5b50565b600081905061079982610777565b919050565b60006107a98261078b565b9050919050565b6107b98161079e565b82525050565b60006020820190506107d460008301846107b0565b92915050565b600060ff82169050919050565b6107f0816107da565b81146107fb57600080fd5b50565b60008135905061080d816107e7565b92915050565b600080600080600060a0868803121561082f5761082e61068f565b5b600061083d888289016106f3565b955050602061084e888289016106bd565b945050604061085f888289016107fe565b9350506060610870888289016106bd565b9250506080610881888289016106f3565b9150509295509295909350565b610897816106d2565b82525050565b60006040820190506108b2600083018561088e565b6108bf602083018461088e565b9392505050565b600082825260208201905092915050565b7f496e76616c69642052656d697854797065000000000000000000000000000000600082015250565b600061090d6011836108c6565b9150610918826108d7565b602082019050919050565b6000602082019050818103600083015261093c81610900565b9050919050565b61094c81610694565b82525050565b600061096d610968610963846107da565b610561565b6106d2565b9050919050565b61097d81610952565b82525050565b60006060820190506109986000830186610943565b6109a56020830185610943565b6109b26040830184610974565b949350505050565b6000819050919050565b60006109df6109da6109d5846109ba565b610561565b6106d2565b9050919050565b6109ef816109c4565b82525050565b600082825260208201905092915050565b50565b6000610a166000836109f5565b9150610a2182610a06565b600082019050919050565b600060c082019050610a416000830188610943565b610a4e6020830187610943565b610a5b6040830186610974565b610a6860608301856109e6565b610a756080830184610943565b81810360a0830152610a8681610a09565b90509695505050505050565b600081519050610aa1816106dc565b92915050565b600060208284031215610abd57610abc61068f565b5b6000610acb84828501610a92565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610b38816106d2565b82525050565b6000610b4a8383610b2f565b60208301905092915050565b6000602082019050919050565b6000610b6e82610b03565b610b788185610b0e565b9350610b8383610b1f565b8060005b83811015610bb4578151610b9b8882610b3e565b9750610ba683610b56565b925050600181019050610b87565b5085935050505092915050565b6000606082019050610bd66000830185610943565b8181036020830152610be88184610b63565b90508181036040830152610bfb81610a09565b9050939250505056fea2646970667358221220a064efa3d8a716cf7b47b20bc82c7f5783c0cb9fc5219ce127c7bad9ace8c76764736f6c63430008170033";

type IPALicenseTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IPALicenseTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class IPALicenseToken__factory extends ContractFactory {
  constructor(...args: IPALicenseTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    ipAssetRegistry: PromiseOrValue<string>,
    licensingModule: PromiseOrValue<string>,
    pilTemplate: PromiseOrValue<string>,
    bodhi: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<IPALicenseToken> {
    return super.deploy(
      ipAssetRegistry,
      licensingModule,
      pilTemplate,
      bodhi,
      overrides || {}
    ) as Promise<IPALicenseToken>;
  }
  override getDeployTransaction(
    ipAssetRegistry: PromiseOrValue<string>,
    licensingModule: PromiseOrValue<string>,
    pilTemplate: PromiseOrValue<string>,
    bodhi: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      ipAssetRegistry,
      licensingModule,
      pilTemplate,
      bodhi,
      overrides || {}
    );
  }
  override attach(address: string): IPALicenseToken {
    return super.attach(address) as IPALicenseToken;
  }
  override connect(signer: Signer): IPALicenseToken__factory {
    return super.connect(signer) as IPALicenseToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IPALicenseTokenInterface {
    return new utils.Interface(_abi) as IPALicenseTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IPALicenseToken {
    return new Contract(address, _abi, signerOrProvider) as IPALicenseToken;
  }
}
