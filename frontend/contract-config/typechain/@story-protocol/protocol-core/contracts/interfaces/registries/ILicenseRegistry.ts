/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export declare namespace Licensing {
  export type MintingLicenseConfigStruct = {
    isSet: PromiseOrValue<boolean>;
    mintingFee: PromiseOrValue<BigNumberish>;
    mintingFeeModule: PromiseOrValue<string>;
    receiverCheckModule: PromiseOrValue<string>;
    receiverCheckData: PromiseOrValue<BytesLike>;
  };

  export type MintingLicenseConfigStructOutput = [
    boolean,
    BigNumber,
    string,
    string,
    string
  ] & {
    isSet: boolean;
    mintingFee: BigNumber;
    mintingFeeModule: string;
    receiverCheckModule: string;
    receiverCheckData: string;
  };
}

export interface ILicenseRegistryInterface extends utils.Interface {
  functions: {
    "attachLicenseTermsToIp(address,address,uint256)": FunctionFragment;
    "exists(address,uint256)": FunctionFragment;
    "getAttachedLicenseTerms(address,uint256)": FunctionFragment;
    "getAttachedLicenseTermsCount(address)": FunctionFragment;
    "getDefaultLicenseTerms()": FunctionFragment;
    "getDerivativeIp(address,uint256)": FunctionFragment;
    "getDerivativeIpCount(address)": FunctionFragment;
    "getExpireTime(address)": FunctionFragment;
    "getMintingLicenseConfig(address,address,uint256)": FunctionFragment;
    "getParentIp(address,uint256)": FunctionFragment;
    "getParentIpCount(address)": FunctionFragment;
    "hasDerivativeIps(address)": FunctionFragment;
    "hasIpAttachedLicenseTerms(address,address,uint256)": FunctionFragment;
    "isDerivativeIp(address)": FunctionFragment;
    "isExpiredNow(address)": FunctionFragment;
    "isParentIp(address,address)": FunctionFragment;
    "isRegisteredLicenseTemplate(address)": FunctionFragment;
    "registerDerivativeIp(address,address[],address,uint256[])": FunctionFragment;
    "registerLicenseTemplate(address)": FunctionFragment;
    "setDefaultLicenseTerms(address,uint256)": FunctionFragment;
    "setExpireTime(address,uint256)": FunctionFragment;
    "setMintingLicenseConfigForIp(address,(bool,uint256,address,address,bytes))": FunctionFragment;
    "setMintingLicenseConfigForLicense(address,address,uint256,(bool,uint256,address,address,bytes))": FunctionFragment;
    "verifyMintLicenseToken(address,address,uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "attachLicenseTermsToIp"
      | "attachLicenseTermsToIp(address,address,uint256)"
      | "exists"
      | "exists(address,uint256)"
      | "getAttachedLicenseTerms"
      | "getAttachedLicenseTerms(address,uint256)"
      | "getAttachedLicenseTermsCount"
      | "getAttachedLicenseTermsCount(address)"
      | "getDefaultLicenseTerms"
      | "getDefaultLicenseTerms()"
      | "getDerivativeIp"
      | "getDerivativeIp(address,uint256)"
      | "getDerivativeIpCount"
      | "getDerivativeIpCount(address)"
      | "getExpireTime"
      | "getExpireTime(address)"
      | "getMintingLicenseConfig"
      | "getMintingLicenseConfig(address,address,uint256)"
      | "getParentIp"
      | "getParentIp(address,uint256)"
      | "getParentIpCount"
      | "getParentIpCount(address)"
      | "hasDerivativeIps"
      | "hasDerivativeIps(address)"
      | "hasIpAttachedLicenseTerms"
      | "hasIpAttachedLicenseTerms(address,address,uint256)"
      | "isDerivativeIp"
      | "isDerivativeIp(address)"
      | "isExpiredNow"
      | "isExpiredNow(address)"
      | "isParentIp"
      | "isParentIp(address,address)"
      | "isRegisteredLicenseTemplate"
      | "isRegisteredLicenseTemplate(address)"
      | "registerDerivativeIp"
      | "registerDerivativeIp(address,address[],address,uint256[])"
      | "registerLicenseTemplate"
      | "registerLicenseTemplate(address)"
      | "setDefaultLicenseTerms"
      | "setDefaultLicenseTerms(address,uint256)"
      | "setExpireTime"
      | "setExpireTime(address,uint256)"
      | "setMintingLicenseConfigForIp"
      | "setMintingLicenseConfigForIp(address,(bool,uint256,address,address,bytes))"
      | "setMintingLicenseConfigForLicense"
      | "setMintingLicenseConfigForLicense(address,address,uint256,(bool,uint256,address,address,bytes))"
      | "verifyMintLicenseToken"
      | "verifyMintLicenseToken(address,address,uint256,bool)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "attachLicenseTermsToIp",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "attachLicenseTermsToIp(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exists(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttachedLicenseTerms",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttachedLicenseTerms(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttachedLicenseTermsCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttachedLicenseTermsCount(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultLicenseTerms",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultLicenseTerms()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDerivativeIp",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDerivativeIp(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDerivativeIpCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDerivativeIpCount(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpireTime",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpireTime(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintingLicenseConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintingLicenseConfig(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getParentIp",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getParentIp(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getParentIpCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getParentIpCount(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasDerivativeIps",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasDerivativeIps(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasIpAttachedLicenseTerms",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasIpAttachedLicenseTerms(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isDerivativeIp",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isDerivativeIp(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isExpiredNow",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isExpiredNow(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isParentIp",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isParentIp(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredLicenseTemplate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredLicenseTemplate(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDerivativeIp",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDerivativeIp(address,address[],address,uint256[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerLicenseTemplate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerLicenseTemplate(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultLicenseTerms",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultLicenseTerms(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpireTime",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpireTime(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintingLicenseConfigForIp",
    values: [PromiseOrValue<string>, Licensing.MintingLicenseConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintingLicenseConfigForIp(address,(bool,uint256,address,address,bytes))",
    values: [PromiseOrValue<string>, Licensing.MintingLicenseConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintingLicenseConfigForLicense",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      Licensing.MintingLicenseConfigStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintingLicenseConfigForLicense(address,address,uint256,(bool,uint256,address,address,bytes))",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      Licensing.MintingLicenseConfigStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMintLicenseToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMintLicenseToken(address,address,uint256,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "attachLicenseTermsToIp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attachLicenseTermsToIp(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exists(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttachedLicenseTerms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttachedLicenseTerms(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttachedLicenseTermsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttachedLicenseTermsCount(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultLicenseTerms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultLicenseTerms()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDerivativeIp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDerivativeIp(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDerivativeIpCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDerivativeIpCount(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpireTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpireTime(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintingLicenseConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintingLicenseConfig(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParentIp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParentIp(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParentIpCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParentIpCount(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasDerivativeIps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasDerivativeIps(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasIpAttachedLicenseTerms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasIpAttachedLicenseTerms(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDerivativeIp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDerivativeIp(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExpiredNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExpiredNow(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isParentIp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isParentIp(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredLicenseTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredLicenseTemplate(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDerivativeIp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDerivativeIp(address,address[],address,uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerLicenseTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerLicenseTemplate(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultLicenseTerms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultLicenseTerms(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExpireTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExpireTime(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintingLicenseConfigForIp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintingLicenseConfigForIp(address,(bool,uint256,address,address,bytes))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintingLicenseConfigForLicense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintingLicenseConfigForLicense(address,address,uint256,(bool,uint256,address,address,bytes))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMintLicenseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMintLicenseToken(address,address,uint256,bool)",
    data: BytesLike
  ): Result;

  events: {
    "ExpirationTimeSet(address,uint256)": EventFragment;
    "LicenseTemplateRegistered(address)": EventFragment;
    "MintingLicenseConfigSetForIP(address,tuple)": EventFragment;
    "MintingLicenseConfigSetLicense(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExpirationTimeSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExpirationTimeSet(address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LicenseTemplateRegistered"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LicenseTemplateRegistered(address)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MintingLicenseConfigSetForIP"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MintingLicenseConfigSetForIP(address,tuple)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MintingLicenseConfigSetLicense"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MintingLicenseConfigSetLicense(address,address,uint256)"
  ): EventFragment;
}

export interface ExpirationTimeSetEventObject {
  ipId: string;
  expireTime: BigNumber;
}
export type ExpirationTimeSetEvent = TypedEvent<
  [string, BigNumber],
  ExpirationTimeSetEventObject
>;

export type ExpirationTimeSetEventFilter =
  TypedEventFilter<ExpirationTimeSetEvent>;

export interface LicenseTemplateRegisteredEventObject {
  licenseTemplate: string;
}
export type LicenseTemplateRegisteredEvent = TypedEvent<
  [string],
  LicenseTemplateRegisteredEventObject
>;

export type LicenseTemplateRegisteredEventFilter =
  TypedEventFilter<LicenseTemplateRegisteredEvent>;

export interface MintingLicenseConfigSetForIPEventObject {
  ipId: string;
  mintingLicenseConfig: Licensing.MintingLicenseConfigStructOutput;
}
export type MintingLicenseConfigSetForIPEvent = TypedEvent<
  [string, Licensing.MintingLicenseConfigStructOutput],
  MintingLicenseConfigSetForIPEventObject
>;

export type MintingLicenseConfigSetForIPEventFilter =
  TypedEventFilter<MintingLicenseConfigSetForIPEvent>;

export interface MintingLicenseConfigSetLicenseEventObject {
  ipId: string;
  licenseTemplate: string;
  licenseTermsId: BigNumber;
}
export type MintingLicenseConfigSetLicenseEvent = TypedEvent<
  [string, string, BigNumber],
  MintingLicenseConfigSetLicenseEventObject
>;

export type MintingLicenseConfigSetLicenseEventFilter =
  TypedEventFilter<MintingLicenseConfigSetLicenseEvent>;

export interface ILicenseRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILicenseRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    attachLicenseTermsToIp(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "attachLicenseTermsToIp(address,address,uint256)"(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exists(
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "exists(address,uint256)"(
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getAttachedLicenseTerms(
      ipId: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        licenseTemplate: string;
        licenseTermsId: BigNumber;
      }
    >;

    "getAttachedLicenseTerms(address,uint256)"(
      ipId: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        licenseTemplate: string;
        licenseTermsId: BigNumber;
      }
    >;

    getAttachedLicenseTermsCount(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getAttachedLicenseTermsCount(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDefaultLicenseTerms(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        licenseTemplate: string;
        licenseTermsId: BigNumber;
      }
    >;

    "getDefaultLicenseTerms()"(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        licenseTemplate: string;
        licenseTermsId: BigNumber;
      }
    >;

    getDerivativeIp(
      parentIpId: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { childIpId: string }>;

    "getDerivativeIp(address,uint256)"(
      parentIpId: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { childIpId: string }>;

    getDerivativeIpCount(
      parentIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getDerivativeIpCount(address)"(
      parentIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getExpireTime(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getExpireTime(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMintingLicenseConfig(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Licensing.MintingLicenseConfigStructOutput]>;

    "getMintingLicenseConfig(address,address,uint256)"(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Licensing.MintingLicenseConfigStructOutput]>;

    getParentIp(
      childIpId: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { parentIpId: string }>;

    "getParentIp(address,uint256)"(
      childIpId: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { parentIpId: string }>;

    getParentIpCount(
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getParentIpCount(address)"(
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasDerivativeIps(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasDerivativeIps(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasIpAttachedLicenseTerms(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasIpAttachedLicenseTerms(address,address,uint256)"(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isDerivativeIp(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isDerivativeIp(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isExpiredNow(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isExpiredNow(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isParentIp(
      parentIpId: PromiseOrValue<string>,
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isParentIp(address,address)"(
      parentIpId: PromiseOrValue<string>,
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRegisteredLicenseTemplate(
      licenseTemplate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isRegisteredLicenseTemplate(address)"(
      licenseTemplate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerDerivativeIp(
      ipId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerDerivativeIp(address,address[],address,uint256[])"(
      ipId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerLicenseTemplate(
      licenseTemplate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerLicenseTemplate(address)"(
      licenseTemplate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDefaultLicenseTerms(
      newLicenseTemplate: PromiseOrValue<string>,
      newLicenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setDefaultLicenseTerms(address,uint256)"(
      newLicenseTemplate: PromiseOrValue<string>,
      newLicenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExpireTime(
      ipId: PromiseOrValue<string>,
      expireTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setExpireTime(address,uint256)"(
      ipId: PromiseOrValue<string>,
      expireTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMintingLicenseConfigForIp(
      ipId: PromiseOrValue<string>,
      mintingLicenseConfig: Licensing.MintingLicenseConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setMintingLicenseConfigForIp(address,(bool,uint256,address,address,bytes))"(
      ipId: PromiseOrValue<string>,
      mintingLicenseConfig: Licensing.MintingLicenseConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMintingLicenseConfigForLicense(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      mintingLicenseConfig: Licensing.MintingLicenseConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setMintingLicenseConfigForLicense(address,address,uint256,(bool,uint256,address,address,bytes))"(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      mintingLicenseConfig: Licensing.MintingLicenseConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyMintLicenseToken(
      licensorIpId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      isMintedByIpOwner: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[Licensing.MintingLicenseConfigStructOutput]>;

    "verifyMintLicenseToken(address,address,uint256,bool)"(
      licensorIpId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      isMintedByIpOwner: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[Licensing.MintingLicenseConfigStructOutput]>;
  };

  attachLicenseTermsToIp(
    ipId: PromiseOrValue<string>,
    licenseTemplate: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "attachLicenseTermsToIp(address,address,uint256)"(
    ipId: PromiseOrValue<string>,
    licenseTemplate: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exists(
    licenseTemplate: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "exists(address,uint256)"(
    licenseTemplate: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getAttachedLicenseTerms(
    ipId: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { licenseTemplate: string; licenseTermsId: BigNumber }
  >;

  "getAttachedLicenseTerms(address,uint256)"(
    ipId: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { licenseTemplate: string; licenseTermsId: BigNumber }
  >;

  getAttachedLicenseTermsCount(
    ipId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAttachedLicenseTermsCount(address)"(
    ipId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDefaultLicenseTerms(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { licenseTemplate: string; licenseTermsId: BigNumber }
  >;

  "getDefaultLicenseTerms()"(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { licenseTemplate: string; licenseTermsId: BigNumber }
  >;

  getDerivativeIp(
    parentIpId: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getDerivativeIp(address,uint256)"(
    parentIpId: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getDerivativeIpCount(
    parentIpId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getDerivativeIpCount(address)"(
    parentIpId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getExpireTime(
    ipId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getExpireTime(address)"(
    ipId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMintingLicenseConfig(
    ipId: PromiseOrValue<string>,
    licenseTemplate: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Licensing.MintingLicenseConfigStructOutput>;

  "getMintingLicenseConfig(address,address,uint256)"(
    ipId: PromiseOrValue<string>,
    licenseTemplate: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Licensing.MintingLicenseConfigStructOutput>;

  getParentIp(
    childIpId: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getParentIp(address,uint256)"(
    childIpId: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getParentIpCount(
    childIpId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getParentIpCount(address)"(
    childIpId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasDerivativeIps(
    ipId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasDerivativeIps(address)"(
    ipId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasIpAttachedLicenseTerms(
    ipId: PromiseOrValue<string>,
    licenseTemplate: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasIpAttachedLicenseTerms(address,address,uint256)"(
    ipId: PromiseOrValue<string>,
    licenseTemplate: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isDerivativeIp(
    ipId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isDerivativeIp(address)"(
    ipId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isExpiredNow(
    ipId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isExpiredNow(address)"(
    ipId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isParentIp(
    parentIpId: PromiseOrValue<string>,
    childIpId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isParentIp(address,address)"(
    parentIpId: PromiseOrValue<string>,
    childIpId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRegisteredLicenseTemplate(
    licenseTemplate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isRegisteredLicenseTemplate(address)"(
    licenseTemplate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerDerivativeIp(
    ipId: PromiseOrValue<string>,
    parentIpIds: PromiseOrValue<string>[],
    licenseTemplate: PromiseOrValue<string>,
    licenseTermsIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerDerivativeIp(address,address[],address,uint256[])"(
    ipId: PromiseOrValue<string>,
    parentIpIds: PromiseOrValue<string>[],
    licenseTemplate: PromiseOrValue<string>,
    licenseTermsIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerLicenseTemplate(
    licenseTemplate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerLicenseTemplate(address)"(
    licenseTemplate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDefaultLicenseTerms(
    newLicenseTemplate: PromiseOrValue<string>,
    newLicenseTermsId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setDefaultLicenseTerms(address,uint256)"(
    newLicenseTemplate: PromiseOrValue<string>,
    newLicenseTermsId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExpireTime(
    ipId: PromiseOrValue<string>,
    expireTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setExpireTime(address,uint256)"(
    ipId: PromiseOrValue<string>,
    expireTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMintingLicenseConfigForIp(
    ipId: PromiseOrValue<string>,
    mintingLicenseConfig: Licensing.MintingLicenseConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setMintingLicenseConfigForIp(address,(bool,uint256,address,address,bytes))"(
    ipId: PromiseOrValue<string>,
    mintingLicenseConfig: Licensing.MintingLicenseConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMintingLicenseConfigForLicense(
    ipId: PromiseOrValue<string>,
    licenseTemplate: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    mintingLicenseConfig: Licensing.MintingLicenseConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setMintingLicenseConfigForLicense(address,address,uint256,(bool,uint256,address,address,bytes))"(
    ipId: PromiseOrValue<string>,
    licenseTemplate: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    mintingLicenseConfig: Licensing.MintingLicenseConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyMintLicenseToken(
    licensorIpId: PromiseOrValue<string>,
    licenseTemplate: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    isMintedByIpOwner: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<Licensing.MintingLicenseConfigStructOutput>;

  "verifyMintLicenseToken(address,address,uint256,bool)"(
    licensorIpId: PromiseOrValue<string>,
    licenseTemplate: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    isMintedByIpOwner: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<Licensing.MintingLicenseConfigStructOutput>;

  callStatic: {
    attachLicenseTermsToIp(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "attachLicenseTermsToIp(address,address,uint256)"(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    exists(
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "exists(address,uint256)"(
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAttachedLicenseTerms(
      ipId: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        licenseTemplate: string;
        licenseTermsId: BigNumber;
      }
    >;

    "getAttachedLicenseTerms(address,uint256)"(
      ipId: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        licenseTemplate: string;
        licenseTermsId: BigNumber;
      }
    >;

    getAttachedLicenseTermsCount(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAttachedLicenseTermsCount(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDefaultLicenseTerms(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        licenseTemplate: string;
        licenseTermsId: BigNumber;
      }
    >;

    "getDefaultLicenseTerms()"(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        licenseTemplate: string;
        licenseTermsId: BigNumber;
      }
    >;

    getDerivativeIp(
      parentIpId: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getDerivativeIp(address,uint256)"(
      parentIpId: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getDerivativeIpCount(
      parentIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDerivativeIpCount(address)"(
      parentIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExpireTime(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getExpireTime(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMintingLicenseConfig(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Licensing.MintingLicenseConfigStructOutput>;

    "getMintingLicenseConfig(address,address,uint256)"(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Licensing.MintingLicenseConfigStructOutput>;

    getParentIp(
      childIpId: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getParentIp(address,uint256)"(
      childIpId: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getParentIpCount(
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getParentIpCount(address)"(
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasDerivativeIps(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasDerivativeIps(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasIpAttachedLicenseTerms(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasIpAttachedLicenseTerms(address,address,uint256)"(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isDerivativeIp(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isDerivativeIp(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExpiredNow(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isExpiredNow(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isParentIp(
      parentIpId: PromiseOrValue<string>,
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isParentIp(address,address)"(
      parentIpId: PromiseOrValue<string>,
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRegisteredLicenseTemplate(
      licenseTemplate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isRegisteredLicenseTemplate(address)"(
      licenseTemplate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerDerivativeIp(
      ipId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "registerDerivativeIp(address,address[],address,uint256[])"(
      ipId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    registerLicenseTemplate(
      licenseTemplate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerLicenseTemplate(address)"(
      licenseTemplate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultLicenseTerms(
      newLicenseTemplate: PromiseOrValue<string>,
      newLicenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDefaultLicenseTerms(address,uint256)"(
      newLicenseTemplate: PromiseOrValue<string>,
      newLicenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExpireTime(
      ipId: PromiseOrValue<string>,
      expireTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setExpireTime(address,uint256)"(
      ipId: PromiseOrValue<string>,
      expireTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintingLicenseConfigForIp(
      ipId: PromiseOrValue<string>,
      mintingLicenseConfig: Licensing.MintingLicenseConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMintingLicenseConfigForIp(address,(bool,uint256,address,address,bytes))"(
      ipId: PromiseOrValue<string>,
      mintingLicenseConfig: Licensing.MintingLicenseConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintingLicenseConfigForLicense(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      mintingLicenseConfig: Licensing.MintingLicenseConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMintingLicenseConfigForLicense(address,address,uint256,(bool,uint256,address,address,bytes))"(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      mintingLicenseConfig: Licensing.MintingLicenseConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyMintLicenseToken(
      licensorIpId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      isMintedByIpOwner: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<Licensing.MintingLicenseConfigStructOutput>;

    "verifyMintLicenseToken(address,address,uint256,bool)"(
      licensorIpId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      isMintedByIpOwner: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<Licensing.MintingLicenseConfigStructOutput>;
  };

  filters: {
    "ExpirationTimeSet(address,uint256)"(
      ipId?: PromiseOrValue<string> | null,
      expireTime?: null
    ): ExpirationTimeSetEventFilter;
    ExpirationTimeSet(
      ipId?: PromiseOrValue<string> | null,
      expireTime?: null
    ): ExpirationTimeSetEventFilter;

    "LicenseTemplateRegistered(address)"(
      licenseTemplate?: PromiseOrValue<string> | null
    ): LicenseTemplateRegisteredEventFilter;
    LicenseTemplateRegistered(
      licenseTemplate?: PromiseOrValue<string> | null
    ): LicenseTemplateRegisteredEventFilter;

    "MintingLicenseConfigSetForIP(address,tuple)"(
      ipId?: PromiseOrValue<string> | null,
      mintingLicenseConfig?: null
    ): MintingLicenseConfigSetForIPEventFilter;
    MintingLicenseConfigSetForIP(
      ipId?: PromiseOrValue<string> | null,
      mintingLicenseConfig?: null
    ): MintingLicenseConfigSetForIPEventFilter;

    "MintingLicenseConfigSetLicense(address,address,uint256)"(
      ipId?: PromiseOrValue<string> | null,
      licenseTemplate?: PromiseOrValue<string> | null,
      licenseTermsId?: PromiseOrValue<BigNumberish> | null
    ): MintingLicenseConfigSetLicenseEventFilter;
    MintingLicenseConfigSetLicense(
      ipId?: PromiseOrValue<string> | null,
      licenseTemplate?: PromiseOrValue<string> | null,
      licenseTermsId?: PromiseOrValue<BigNumberish> | null
    ): MintingLicenseConfigSetLicenseEventFilter;
  };

  estimateGas: {
    attachLicenseTermsToIp(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "attachLicenseTermsToIp(address,address,uint256)"(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exists(
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exists(address,uint256)"(
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAttachedLicenseTerms(
      ipId: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAttachedLicenseTerms(address,uint256)"(
      ipId: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAttachedLicenseTermsCount(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAttachedLicenseTermsCount(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDefaultLicenseTerms(overrides?: CallOverrides): Promise<BigNumber>;

    "getDefaultLicenseTerms()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDerivativeIp(
      parentIpId: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDerivativeIp(address,uint256)"(
      parentIpId: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDerivativeIpCount(
      parentIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDerivativeIpCount(address)"(
      parentIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExpireTime(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getExpireTime(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMintingLicenseConfig(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMintingLicenseConfig(address,address,uint256)"(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParentIp(
      childIpId: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getParentIp(address,uint256)"(
      childIpId: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParentIpCount(
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getParentIpCount(address)"(
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasDerivativeIps(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasDerivativeIps(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasIpAttachedLicenseTerms(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasIpAttachedLicenseTerms(address,address,uint256)"(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDerivativeIp(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isDerivativeIp(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExpiredNow(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isExpiredNow(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isParentIp(
      parentIpId: PromiseOrValue<string>,
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isParentIp(address,address)"(
      parentIpId: PromiseOrValue<string>,
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegisteredLicenseTemplate(
      licenseTemplate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isRegisteredLicenseTemplate(address)"(
      licenseTemplate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerDerivativeIp(
      ipId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerDerivativeIp(address,address[],address,uint256[])"(
      ipId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerLicenseTemplate(
      licenseTemplate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerLicenseTemplate(address)"(
      licenseTemplate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDefaultLicenseTerms(
      newLicenseTemplate: PromiseOrValue<string>,
      newLicenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setDefaultLicenseTerms(address,uint256)"(
      newLicenseTemplate: PromiseOrValue<string>,
      newLicenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExpireTime(
      ipId: PromiseOrValue<string>,
      expireTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setExpireTime(address,uint256)"(
      ipId: PromiseOrValue<string>,
      expireTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMintingLicenseConfigForIp(
      ipId: PromiseOrValue<string>,
      mintingLicenseConfig: Licensing.MintingLicenseConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setMintingLicenseConfigForIp(address,(bool,uint256,address,address,bytes))"(
      ipId: PromiseOrValue<string>,
      mintingLicenseConfig: Licensing.MintingLicenseConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMintingLicenseConfigForLicense(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      mintingLicenseConfig: Licensing.MintingLicenseConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setMintingLicenseConfigForLicense(address,address,uint256,(bool,uint256,address,address,bytes))"(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      mintingLicenseConfig: Licensing.MintingLicenseConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyMintLicenseToken(
      licensorIpId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      isMintedByIpOwner: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verifyMintLicenseToken(address,address,uint256,bool)"(
      licensorIpId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      isMintedByIpOwner: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    attachLicenseTermsToIp(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "attachLicenseTermsToIp(address,address,uint256)"(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exists(
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exists(address,uint256)"(
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAttachedLicenseTerms(
      ipId: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAttachedLicenseTerms(address,uint256)"(
      ipId: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAttachedLicenseTermsCount(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAttachedLicenseTermsCount(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefaultLicenseTerms(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDefaultLicenseTerms()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDerivativeIp(
      parentIpId: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDerivativeIp(address,uint256)"(
      parentIpId: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDerivativeIpCount(
      parentIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDerivativeIpCount(address)"(
      parentIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExpireTime(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getExpireTime(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMintingLicenseConfig(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMintingLicenseConfig(address,address,uint256)"(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParentIp(
      childIpId: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getParentIp(address,uint256)"(
      childIpId: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParentIpCount(
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getParentIpCount(address)"(
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasDerivativeIps(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasDerivativeIps(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasIpAttachedLicenseTerms(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasIpAttachedLicenseTerms(address,address,uint256)"(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDerivativeIp(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isDerivativeIp(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExpiredNow(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isExpiredNow(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isParentIp(
      parentIpId: PromiseOrValue<string>,
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isParentIp(address,address)"(
      parentIpId: PromiseOrValue<string>,
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegisteredLicenseTemplate(
      licenseTemplate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isRegisteredLicenseTemplate(address)"(
      licenseTemplate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerDerivativeIp(
      ipId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerDerivativeIp(address,address[],address,uint256[])"(
      ipId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerLicenseTemplate(
      licenseTemplate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerLicenseTemplate(address)"(
      licenseTemplate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultLicenseTerms(
      newLicenseTemplate: PromiseOrValue<string>,
      newLicenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setDefaultLicenseTerms(address,uint256)"(
      newLicenseTemplate: PromiseOrValue<string>,
      newLicenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExpireTime(
      ipId: PromiseOrValue<string>,
      expireTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setExpireTime(address,uint256)"(
      ipId: PromiseOrValue<string>,
      expireTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMintingLicenseConfigForIp(
      ipId: PromiseOrValue<string>,
      mintingLicenseConfig: Licensing.MintingLicenseConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setMintingLicenseConfigForIp(address,(bool,uint256,address,address,bytes))"(
      ipId: PromiseOrValue<string>,
      mintingLicenseConfig: Licensing.MintingLicenseConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMintingLicenseConfigForLicense(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      mintingLicenseConfig: Licensing.MintingLicenseConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setMintingLicenseConfigForLicense(address,address,uint256,(bool,uint256,address,address,bytes))"(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      mintingLicenseConfig: Licensing.MintingLicenseConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyMintLicenseToken(
      licensorIpId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      isMintedByIpOwner: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verifyMintLicenseToken(address,address,uint256,bool)"(
      licensorIpId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      isMintedByIpOwner: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
