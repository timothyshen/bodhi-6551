/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export interface ILicensingModuleInterface extends utils.Interface {
  functions: {
    "attachLicenseTerms(address,address,uint256)": FunctionFragment;
    "mintLicenseTokens(address,address,uint256,uint256,address,bytes)": FunctionFragment;
    "name()": FunctionFragment;
    "registerDerivative(address,address[],uint256[],address,bytes)": FunctionFragment;
    "registerDerivativeWithLicenseTokens(address,uint256[],bytes)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "attachLicenseTerms"
      | "attachLicenseTerms(address,address,uint256)"
      | "mintLicenseTokens"
      | "mintLicenseTokens(address,address,uint256,uint256,address,bytes)"
      | "name"
      | "name()"
      | "registerDerivative"
      | "registerDerivative(address,address[],uint256[],address,bytes)"
      | "registerDerivativeWithLicenseTokens"
      | "registerDerivativeWithLicenseTokens(address,uint256[],bytes)"
      | "supportsInterface"
      | "supportsInterface(bytes4)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "attachLicenseTerms",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "attachLicenseTerms(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintLicenseTokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintLicenseTokens(address,address,uint256,uint256,address,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "name()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerDerivative",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDerivative(address,address[],uint256[],address,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDerivativeWithLicenseTokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDerivativeWithLicenseTokens(address,uint256[],bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface(bytes4)",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "attachLicenseTerms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attachLicenseTerms(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintLicenseTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintLicenseTokens(address,address,uint256,uint256,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerDerivative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDerivative(address,address[],uint256[],address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDerivativeWithLicenseTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDerivativeWithLicenseTokens(address,uint256[],bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface(bytes4)",
    data: BytesLike
  ): Result;

  events: {
    "DerivativeRegistered(address,address,uint256[],address[],uint256[],address)": EventFragment;
    "LicenseTermsAttached(address,address,address,uint256)": EventFragment;
    "LicenseTokensMinted(address,address,address,uint256,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DerivativeRegistered"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DerivativeRegistered(address,address,uint256[],address[],uint256[],address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LicenseTermsAttached"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LicenseTermsAttached(address,address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LicenseTokensMinted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LicenseTokensMinted(address,address,address,uint256,uint256,address,uint256)"
  ): EventFragment;
}

export interface DerivativeRegisteredEventObject {
  caller: string;
  childIpId: string;
  licenseTokenIds: BigNumber[];
  parentIpIds: string[];
  licenseTermsIds: BigNumber[];
  licenseTemplate: string;
}
export type DerivativeRegisteredEvent = TypedEvent<
  [string, string, BigNumber[], string[], BigNumber[], string],
  DerivativeRegisteredEventObject
>;

export type DerivativeRegisteredEventFilter =
  TypedEventFilter<DerivativeRegisteredEvent>;

export interface LicenseTermsAttachedEventObject {
  caller: string;
  ipId: string;
  licenseTemplate: string;
  licenseTermsId: BigNumber;
}
export type LicenseTermsAttachedEvent = TypedEvent<
  [string, string, string, BigNumber],
  LicenseTermsAttachedEventObject
>;

export type LicenseTermsAttachedEventFilter =
  TypedEventFilter<LicenseTermsAttachedEvent>;

export interface LicenseTokensMintedEventObject {
  caller: string;
  licensorIpId: string;
  licenseTemplate: string;
  licenseTermsId: BigNumber;
  amount: BigNumber;
  receiver: string;
  startLicenseTokenId: BigNumber;
}
export type LicenseTokensMintedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, string, BigNumber],
  LicenseTokensMintedEventObject
>;

export type LicenseTokensMintedEventFilter =
  TypedEventFilter<LicenseTokensMintedEvent>;

export interface ILicensingModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILicensingModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    attachLicenseTerms(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "attachLicenseTerms(address,address,uint256)"(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintLicenseTokens(
      licensorIpId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mintLicenseTokens(address,address,uint256,uint256,address,bytes)"(
      licensorIpId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "name()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerDerivative(
      childIpId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      licenseTemplate: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerDerivative(address,address[],uint256[],address,bytes)"(
      childIpId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      licenseTemplate: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerDerivativeWithLicenseTokens(
      childIpId: PromiseOrValue<string>,
      licenseTokenIds: PromiseOrValue<BigNumberish>[],
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerDerivativeWithLicenseTokens(address,uint256[],bytes)"(
      childIpId: PromiseOrValue<string>,
      licenseTokenIds: PromiseOrValue<BigNumberish>[],
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  attachLicenseTerms(
    ipId: PromiseOrValue<string>,
    licenseTemplate: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "attachLicenseTerms(address,address,uint256)"(
    ipId: PromiseOrValue<string>,
    licenseTemplate: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintLicenseTokens(
    licensorIpId: PromiseOrValue<string>,
    licenseTemplate: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    royaltyContext: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mintLicenseTokens(address,address,uint256,uint256,address,bytes)"(
    licensorIpId: PromiseOrValue<string>,
    licenseTemplate: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    royaltyContext: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "name()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerDerivative(
    childIpId: PromiseOrValue<string>,
    parentIpIds: PromiseOrValue<string>[],
    licenseTermsIds: PromiseOrValue<BigNumberish>[],
    licenseTemplate: PromiseOrValue<string>,
    royaltyContext: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerDerivative(address,address[],uint256[],address,bytes)"(
    childIpId: PromiseOrValue<string>,
    parentIpIds: PromiseOrValue<string>[],
    licenseTermsIds: PromiseOrValue<BigNumberish>[],
    licenseTemplate: PromiseOrValue<string>,
    royaltyContext: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerDerivativeWithLicenseTokens(
    childIpId: PromiseOrValue<string>,
    licenseTokenIds: PromiseOrValue<BigNumberish>[],
    royaltyContext: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerDerivativeWithLicenseTokens(address,uint256[],bytes)"(
    childIpId: PromiseOrValue<string>,
    licenseTokenIds: PromiseOrValue<BigNumberish>[],
    royaltyContext: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    attachLicenseTerms(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "attachLicenseTerms(address,address,uint256)"(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintLicenseTokens(
      licensorIpId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mintLicenseTokens(address,address,uint256,uint256,address,bytes)"(
      licensorIpId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    registerDerivative(
      childIpId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      licenseTemplate: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerDerivative(address,address[],uint256[],address,bytes)"(
      childIpId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      licenseTemplate: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerDerivativeWithLicenseTokens(
      childIpId: PromiseOrValue<string>,
      licenseTokenIds: PromiseOrValue<BigNumberish>[],
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerDerivativeWithLicenseTokens(address,uint256[],bytes)"(
      childIpId: PromiseOrValue<string>,
      licenseTokenIds: PromiseOrValue<BigNumberish>[],
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "DerivativeRegistered(address,address,uint256[],address[],uint256[],address)"(
      caller?: PromiseOrValue<string> | null,
      childIpId?: PromiseOrValue<string> | null,
      licenseTokenIds?: null,
      parentIpIds?: null,
      licenseTermsIds?: null,
      licenseTemplate?: null
    ): DerivativeRegisteredEventFilter;
    DerivativeRegistered(
      caller?: PromiseOrValue<string> | null,
      childIpId?: PromiseOrValue<string> | null,
      licenseTokenIds?: null,
      parentIpIds?: null,
      licenseTermsIds?: null,
      licenseTemplate?: null
    ): DerivativeRegisteredEventFilter;

    "LicenseTermsAttached(address,address,address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      ipId?: PromiseOrValue<string> | null,
      licenseTemplate?: null,
      licenseTermsId?: null
    ): LicenseTermsAttachedEventFilter;
    LicenseTermsAttached(
      caller?: PromiseOrValue<string> | null,
      ipId?: PromiseOrValue<string> | null,
      licenseTemplate?: null,
      licenseTermsId?: null
    ): LicenseTermsAttachedEventFilter;

    "LicenseTokensMinted(address,address,address,uint256,uint256,address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      licensorIpId?: PromiseOrValue<string> | null,
      licenseTemplate?: null,
      licenseTermsId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      receiver?: null,
      startLicenseTokenId?: null
    ): LicenseTokensMintedEventFilter;
    LicenseTokensMinted(
      caller?: PromiseOrValue<string> | null,
      licensorIpId?: PromiseOrValue<string> | null,
      licenseTemplate?: null,
      licenseTermsId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      receiver?: null,
      startLicenseTokenId?: null
    ): LicenseTokensMintedEventFilter;
  };

  estimateGas: {
    attachLicenseTerms(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "attachLicenseTerms(address,address,uint256)"(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintLicenseTokens(
      licensorIpId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mintLicenseTokens(address,address,uint256,uint256,address,bytes)"(
      licensorIpId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "name()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerDerivative(
      childIpId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      licenseTemplate: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerDerivative(address,address[],uint256[],address,bytes)"(
      childIpId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      licenseTemplate: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerDerivativeWithLicenseTokens(
      childIpId: PromiseOrValue<string>,
      licenseTokenIds: PromiseOrValue<BigNumberish>[],
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerDerivativeWithLicenseTokens(address,uint256[],bytes)"(
      childIpId: PromiseOrValue<string>,
      licenseTokenIds: PromiseOrValue<BigNumberish>[],
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    attachLicenseTerms(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "attachLicenseTerms(address,address,uint256)"(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintLicenseTokens(
      licensorIpId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mintLicenseTokens(address,address,uint256,uint256,address,bytes)"(
      licensorIpId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "name()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerDerivative(
      childIpId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      licenseTemplate: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerDerivative(address,address[],uint256[],address,bytes)"(
      childIpId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      licenseTemplate: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerDerivativeWithLicenseTokens(
      childIpId: PromiseOrValue<string>,
      licenseTokenIds: PromiseOrValue<BigNumberish>[],
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerDerivativeWithLicenseTokens(address,uint256[],bytes)"(
      childIpId: PromiseOrValue<string>,
      licenseTokenIds: PromiseOrValue<BigNumberish>[],
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
