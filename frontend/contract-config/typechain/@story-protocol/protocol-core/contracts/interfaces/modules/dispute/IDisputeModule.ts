/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export interface IDisputeModuleInterface extends utils.Interface {
  functions: {
    "IN_DISPUTE()": FunctionFragment;
    "arbitrationPolicies(address)": FunctionFragment;
    "baseArbitrationPolicy()": FunctionFragment;
    "cancelDispute(uint256,bytes)": FunctionFragment;
    "disputeCounter()": FunctionFragment;
    "disputes(uint256)": FunctionFragment;
    "isIpTagged(address)": FunctionFragment;
    "isWhitelistedArbitrationPolicy(address)": FunctionFragment;
    "isWhitelistedArbitrationRelayer(address,address)": FunctionFragment;
    "isWhitelistedDisputeTag(bytes32)": FunctionFragment;
    "raiseDispute(address,string,bytes32,bytes)": FunctionFragment;
    "resolveDispute(uint256,bytes)": FunctionFragment;
    "setArbitrationPolicy(address,address)": FunctionFragment;
    "setBaseArbitrationPolicy(address)": FunctionFragment;
    "setDisputeJudgement(uint256,bool,bytes)": FunctionFragment;
    "tagDerivativeIfParentInfringed(address,address,uint256)": FunctionFragment;
    "whitelistArbitrationPolicy(address,bool)": FunctionFragment;
    "whitelistArbitrationRelayer(address,address,bool)": FunctionFragment;
    "whitelistDisputeTag(bytes32,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IN_DISPUTE"
      | "IN_DISPUTE()"
      | "arbitrationPolicies"
      | "arbitrationPolicies(address)"
      | "baseArbitrationPolicy"
      | "baseArbitrationPolicy()"
      | "cancelDispute"
      | "cancelDispute(uint256,bytes)"
      | "disputeCounter"
      | "disputeCounter()"
      | "disputes"
      | "disputes(uint256)"
      | "isIpTagged"
      | "isIpTagged(address)"
      | "isWhitelistedArbitrationPolicy"
      | "isWhitelistedArbitrationPolicy(address)"
      | "isWhitelistedArbitrationRelayer"
      | "isWhitelistedArbitrationRelayer(address,address)"
      | "isWhitelistedDisputeTag"
      | "isWhitelistedDisputeTag(bytes32)"
      | "raiseDispute"
      | "raiseDispute(address,string,bytes32,bytes)"
      | "resolveDispute"
      | "resolveDispute(uint256,bytes)"
      | "setArbitrationPolicy"
      | "setArbitrationPolicy(address,address)"
      | "setBaseArbitrationPolicy"
      | "setBaseArbitrationPolicy(address)"
      | "setDisputeJudgement"
      | "setDisputeJudgement(uint256,bool,bytes)"
      | "tagDerivativeIfParentInfringed"
      | "tagDerivativeIfParentInfringed(address,address,uint256)"
      | "whitelistArbitrationPolicy"
      | "whitelistArbitrationPolicy(address,bool)"
      | "whitelistArbitrationRelayer"
      | "whitelistArbitrationRelayer(address,address,bool)"
      | "whitelistDisputeTag"
      | "whitelistDisputeTag(bytes32,bool)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "IN_DISPUTE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IN_DISPUTE()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "arbitrationPolicies",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "arbitrationPolicies(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "baseArbitrationPolicy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseArbitrationPolicy()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelDispute",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelDispute(uint256,bytes)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disputeCounter()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disputes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "disputes(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isIpTagged",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isIpTagged(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedArbitrationPolicy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedArbitrationPolicy(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedArbitrationRelayer",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedArbitrationRelayer(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedDisputeTag",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedDisputeTag(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "raiseDispute",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "raiseDispute(address,string,bytes32,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDispute",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDispute(uint256,bytes)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setArbitrationPolicy",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setArbitrationPolicy(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseArbitrationPolicy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseArbitrationPolicy(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDisputeJudgement",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDisputeJudgement(uint256,bool,bytes)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tagDerivativeIfParentInfringed",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tagDerivativeIfParentInfringed(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistArbitrationPolicy",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistArbitrationPolicy(address,bool)",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistArbitrationRelayer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistArbitrationRelayer(address,address,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistDisputeTag",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistDisputeTag(bytes32,bool)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(functionFragment: "IN_DISPUTE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "IN_DISPUTE()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arbitrationPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arbitrationPolicies(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseArbitrationPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseArbitrationPolicy()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelDispute(uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeCounter()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "disputes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disputes(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isIpTagged", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isIpTagged(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedArbitrationPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedArbitrationPolicy(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedArbitrationRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedArbitrationRelayer(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedDisputeTag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedDisputeTag(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raiseDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raiseDispute(address,string,bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDispute(uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setArbitrationPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setArbitrationPolicy(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseArbitrationPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseArbitrationPolicy(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDisputeJudgement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDisputeJudgement(uint256,bool,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tagDerivativeIfParentInfringed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tagDerivativeIfParentInfringed(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistArbitrationPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistArbitrationPolicy(address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistArbitrationRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistArbitrationRelayer(address,address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistDisputeTag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistDisputeTag(bytes32,bool)",
    data: BytesLike
  ): Result;

  events: {
    "ArbitrationPolicySet(address,address)": EventFragment;
    "ArbitrationPolicyWhitelistUpdated(address,bool)": EventFragment;
    "ArbitrationRelayerWhitelistUpdated(address,address,bool)": EventFragment;
    "DefaultArbitrationPolicyUpdated(address)": EventFragment;
    "DerivativeTaggedOnParentInfringement(address,address,uint256,bytes32)": EventFragment;
    "DisputeCancelled(uint256,bytes)": EventFragment;
    "DisputeJudgementSet(uint256,bool,bytes)": EventFragment;
    "DisputeRaised(uint256,address,address,address,bytes32,bytes32,bytes)": EventFragment;
    "DisputeResolved(uint256)": EventFragment;
    "TagWhitelistUpdated(bytes32,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ArbitrationPolicySet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ArbitrationPolicySet(address,address)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ArbitrationPolicyWhitelistUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ArbitrationPolicyWhitelistUpdated(address,bool)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ArbitrationRelayerWhitelistUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ArbitrationRelayerWhitelistUpdated(address,address,bool)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DefaultArbitrationPolicyUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DefaultArbitrationPolicyUpdated(address)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DerivativeTaggedOnParentInfringement"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DerivativeTaggedOnParentInfringement(address,address,uint256,bytes32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeCancelled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DisputeCancelled(uint256,bytes)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeJudgementSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DisputeJudgementSet(uint256,bool,bytes)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeRaised"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DisputeRaised(uint256,address,address,address,bytes32,bytes32,bytes)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeResolved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeResolved(uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TagWhitelistUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TagWhitelistUpdated(bytes32,bool)"
  ): EventFragment;
}

export interface ArbitrationPolicySetEventObject {
  ipId: string;
  arbitrationPolicy: string;
}
export type ArbitrationPolicySetEvent = TypedEvent<
  [string, string],
  ArbitrationPolicySetEventObject
>;

export type ArbitrationPolicySetEventFilter =
  TypedEventFilter<ArbitrationPolicySetEvent>;

export interface ArbitrationPolicyWhitelistUpdatedEventObject {
  arbitrationPolicy: string;
  allowed: boolean;
}
export type ArbitrationPolicyWhitelistUpdatedEvent = TypedEvent<
  [string, boolean],
  ArbitrationPolicyWhitelistUpdatedEventObject
>;

export type ArbitrationPolicyWhitelistUpdatedEventFilter =
  TypedEventFilter<ArbitrationPolicyWhitelistUpdatedEvent>;

export interface ArbitrationRelayerWhitelistUpdatedEventObject {
  arbitrationPolicy: string;
  arbitrationRelayer: string;
  allowed: boolean;
}
export type ArbitrationRelayerWhitelistUpdatedEvent = TypedEvent<
  [string, string, boolean],
  ArbitrationRelayerWhitelistUpdatedEventObject
>;

export type ArbitrationRelayerWhitelistUpdatedEventFilter =
  TypedEventFilter<ArbitrationRelayerWhitelistUpdatedEvent>;

export interface DefaultArbitrationPolicyUpdatedEventObject {
  arbitrationPolicy: string;
}
export type DefaultArbitrationPolicyUpdatedEvent = TypedEvent<
  [string],
  DefaultArbitrationPolicyUpdatedEventObject
>;

export type DefaultArbitrationPolicyUpdatedEventFilter =
  TypedEventFilter<DefaultArbitrationPolicyUpdatedEvent>;

export interface DerivativeTaggedOnParentInfringementEventObject {
  parentIpId: string;
  derivativeIpId: string;
  parentDisputeId: BigNumber;
  tag: string;
}
export type DerivativeTaggedOnParentInfringementEvent = TypedEvent<
  [string, string, BigNumber, string],
  DerivativeTaggedOnParentInfringementEventObject
>;

export type DerivativeTaggedOnParentInfringementEventFilter =
  TypedEventFilter<DerivativeTaggedOnParentInfringementEvent>;

export interface DisputeCancelledEventObject {
  disputeId: BigNumber;
  data: string;
}
export type DisputeCancelledEvent = TypedEvent<
  [BigNumber, string],
  DisputeCancelledEventObject
>;

export type DisputeCancelledEventFilter =
  TypedEventFilter<DisputeCancelledEvent>;

export interface DisputeJudgementSetEventObject {
  disputeId: BigNumber;
  decision: boolean;
  data: string;
}
export type DisputeJudgementSetEvent = TypedEvent<
  [BigNumber, boolean, string],
  DisputeJudgementSetEventObject
>;

export type DisputeJudgementSetEventFilter =
  TypedEventFilter<DisputeJudgementSetEvent>;

export interface DisputeRaisedEventObject {
  disputeId: BigNumber;
  targetIpId: string;
  disputeInitiator: string;
  arbitrationPolicy: string;
  linkToDisputeEvidence: string;
  targetTag: string;
  data: string;
}
export type DisputeRaisedEvent = TypedEvent<
  [BigNumber, string, string, string, string, string, string],
  DisputeRaisedEventObject
>;

export type DisputeRaisedEventFilter = TypedEventFilter<DisputeRaisedEvent>;

export interface DisputeResolvedEventObject {
  disputeId: BigNumber;
}
export type DisputeResolvedEvent = TypedEvent<
  [BigNumber],
  DisputeResolvedEventObject
>;

export type DisputeResolvedEventFilter = TypedEventFilter<DisputeResolvedEvent>;

export interface TagWhitelistUpdatedEventObject {
  tag: string;
  allowed: boolean;
}
export type TagWhitelistUpdatedEvent = TypedEvent<
  [string, boolean],
  TagWhitelistUpdatedEventObject
>;

export type TagWhitelistUpdatedEventFilter =
  TypedEventFilter<TagWhitelistUpdatedEvent>;

export interface IDisputeModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDisputeModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IN_DISPUTE(overrides?: CallOverrides): Promise<[string]>;

    "IN_DISPUTE()"(overrides?: CallOverrides): Promise<[string]>;

    arbitrationPolicies(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { policy: string }>;

    "arbitrationPolicies(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { policy: string }>;

    baseArbitrationPolicy(overrides?: CallOverrides): Promise<[string]>;

    "baseArbitrationPolicy()"(overrides?: CallOverrides): Promise<[string]>;

    cancelDispute(
      disputeId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "cancelDispute(uint256,bytes)"(
      disputeId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disputeCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    "disputeCounter()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    disputes(
      disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, BigNumber] & {
        targetIpId: string;
        disputeInitiator: string;
        arbitrationPolicy: string;
        linkToDisputeEvidence: string;
        targetTag: string;
        currentTag: string;
        parentDisputeId: BigNumber;
      }
    >;

    "disputes(uint256)"(
      disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, BigNumber] & {
        targetIpId: string;
        disputeInitiator: string;
        arbitrationPolicy: string;
        linkToDisputeEvidence: string;
        targetTag: string;
        currentTag: string;
        parentDisputeId: BigNumber;
      }
    >;

    isIpTagged(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isIpTagged(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelistedArbitrationPolicy(
      arbitrationPolicy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { allowed: boolean }>;

    "isWhitelistedArbitrationPolicy(address)"(
      arbitrationPolicy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { allowed: boolean }>;

    isWhitelistedArbitrationRelayer(
      arbitrationPolicy: PromiseOrValue<string>,
      arbitrationRelayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { allowed: boolean }>;

    "isWhitelistedArbitrationRelayer(address,address)"(
      arbitrationPolicy: PromiseOrValue<string>,
      arbitrationRelayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { allowed: boolean }>;

    isWhitelistedDisputeTag(
      tag: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { allowed: boolean }>;

    "isWhitelistedDisputeTag(bytes32)"(
      tag: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { allowed: boolean }>;

    raiseDispute(
      targetIpId: PromiseOrValue<string>,
      linkToDisputeEvidence: PromiseOrValue<string>,
      targetTag: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "raiseDispute(address,string,bytes32,bytes)"(
      targetIpId: PromiseOrValue<string>,
      linkToDisputeEvidence: PromiseOrValue<string>,
      targetTag: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolveDispute(
      disputeId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "resolveDispute(uint256,bytes)"(
      disputeId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setArbitrationPolicy(
      ipId: PromiseOrValue<string>,
      arbitrationPolicy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setArbitrationPolicy(address,address)"(
      ipId: PromiseOrValue<string>,
      arbitrationPolicy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBaseArbitrationPolicy(
      arbitrationPolicy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setBaseArbitrationPolicy(address)"(
      arbitrationPolicy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDisputeJudgement(
      disputeId: PromiseOrValue<BigNumberish>,
      decision: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setDisputeJudgement(uint256,bool,bytes)"(
      disputeId: PromiseOrValue<BigNumberish>,
      decision: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tagDerivativeIfParentInfringed(
      parentIpId: PromiseOrValue<string>,
      derivativeIpId: PromiseOrValue<string>,
      parentDisputeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "tagDerivativeIfParentInfringed(address,address,uint256)"(
      parentIpId: PromiseOrValue<string>,
      derivativeIpId: PromiseOrValue<string>,
      parentDisputeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistArbitrationPolicy(
      arbitrationPolicy: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "whitelistArbitrationPolicy(address,bool)"(
      arbitrationPolicy: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistArbitrationRelayer(
      arbitrationPolicy: PromiseOrValue<string>,
      arbPolicyRelayer: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "whitelistArbitrationRelayer(address,address,bool)"(
      arbitrationPolicy: PromiseOrValue<string>,
      arbPolicyRelayer: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistDisputeTag(
      tag: PromiseOrValue<BytesLike>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "whitelistDisputeTag(bytes32,bool)"(
      tag: PromiseOrValue<BytesLike>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  IN_DISPUTE(overrides?: CallOverrides): Promise<string>;

  "IN_DISPUTE()"(overrides?: CallOverrides): Promise<string>;

  arbitrationPolicies(
    ipId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  "arbitrationPolicies(address)"(
    ipId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  baseArbitrationPolicy(overrides?: CallOverrides): Promise<string>;

  "baseArbitrationPolicy()"(overrides?: CallOverrides): Promise<string>;

  cancelDispute(
    disputeId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "cancelDispute(uint256,bytes)"(
    disputeId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disputeCounter(overrides?: CallOverrides): Promise<BigNumber>;

  "disputeCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

  disputes(
    disputeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, string, BigNumber] & {
      targetIpId: string;
      disputeInitiator: string;
      arbitrationPolicy: string;
      linkToDisputeEvidence: string;
      targetTag: string;
      currentTag: string;
      parentDisputeId: BigNumber;
    }
  >;

  "disputes(uint256)"(
    disputeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, string, BigNumber] & {
      targetIpId: string;
      disputeInitiator: string;
      arbitrationPolicy: string;
      linkToDisputeEvidence: string;
      targetTag: string;
      currentTag: string;
      parentDisputeId: BigNumber;
    }
  >;

  isIpTagged(
    ipId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isIpTagged(address)"(
    ipId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelistedArbitrationPolicy(
    arbitrationPolicy: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isWhitelistedArbitrationPolicy(address)"(
    arbitrationPolicy: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelistedArbitrationRelayer(
    arbitrationPolicy: PromiseOrValue<string>,
    arbitrationRelayer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isWhitelistedArbitrationRelayer(address,address)"(
    arbitrationPolicy: PromiseOrValue<string>,
    arbitrationRelayer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelistedDisputeTag(
    tag: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isWhitelistedDisputeTag(bytes32)"(
    tag: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  raiseDispute(
    targetIpId: PromiseOrValue<string>,
    linkToDisputeEvidence: PromiseOrValue<string>,
    targetTag: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "raiseDispute(address,string,bytes32,bytes)"(
    targetIpId: PromiseOrValue<string>,
    linkToDisputeEvidence: PromiseOrValue<string>,
    targetTag: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolveDispute(
    disputeId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "resolveDispute(uint256,bytes)"(
    disputeId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setArbitrationPolicy(
    ipId: PromiseOrValue<string>,
    arbitrationPolicy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setArbitrationPolicy(address,address)"(
    ipId: PromiseOrValue<string>,
    arbitrationPolicy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBaseArbitrationPolicy(
    arbitrationPolicy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setBaseArbitrationPolicy(address)"(
    arbitrationPolicy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDisputeJudgement(
    disputeId: PromiseOrValue<BigNumberish>,
    decision: PromiseOrValue<boolean>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setDisputeJudgement(uint256,bool,bytes)"(
    disputeId: PromiseOrValue<BigNumberish>,
    decision: PromiseOrValue<boolean>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tagDerivativeIfParentInfringed(
    parentIpId: PromiseOrValue<string>,
    derivativeIpId: PromiseOrValue<string>,
    parentDisputeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "tagDerivativeIfParentInfringed(address,address,uint256)"(
    parentIpId: PromiseOrValue<string>,
    derivativeIpId: PromiseOrValue<string>,
    parentDisputeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistArbitrationPolicy(
    arbitrationPolicy: PromiseOrValue<string>,
    allowed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "whitelistArbitrationPolicy(address,bool)"(
    arbitrationPolicy: PromiseOrValue<string>,
    allowed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistArbitrationRelayer(
    arbitrationPolicy: PromiseOrValue<string>,
    arbPolicyRelayer: PromiseOrValue<string>,
    allowed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "whitelistArbitrationRelayer(address,address,bool)"(
    arbitrationPolicy: PromiseOrValue<string>,
    arbPolicyRelayer: PromiseOrValue<string>,
    allowed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistDisputeTag(
    tag: PromiseOrValue<BytesLike>,
    allowed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "whitelistDisputeTag(bytes32,bool)"(
    tag: PromiseOrValue<BytesLike>,
    allowed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    IN_DISPUTE(overrides?: CallOverrides): Promise<string>;

    "IN_DISPUTE()"(overrides?: CallOverrides): Promise<string>;

    arbitrationPolicies(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "arbitrationPolicies(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    baseArbitrationPolicy(overrides?: CallOverrides): Promise<string>;

    "baseArbitrationPolicy()"(overrides?: CallOverrides): Promise<string>;

    cancelDispute(
      disputeId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelDispute(uint256,bytes)"(
      disputeId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    disputeCounter(overrides?: CallOverrides): Promise<BigNumber>;

    "disputeCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

    disputes(
      disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, BigNumber] & {
        targetIpId: string;
        disputeInitiator: string;
        arbitrationPolicy: string;
        linkToDisputeEvidence: string;
        targetTag: string;
        currentTag: string;
        parentDisputeId: BigNumber;
      }
    >;

    "disputes(uint256)"(
      disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, BigNumber] & {
        targetIpId: string;
        disputeInitiator: string;
        arbitrationPolicy: string;
        linkToDisputeEvidence: string;
        targetTag: string;
        currentTag: string;
        parentDisputeId: BigNumber;
      }
    >;

    isIpTagged(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isIpTagged(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelistedArbitrationPolicy(
      arbitrationPolicy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isWhitelistedArbitrationPolicy(address)"(
      arbitrationPolicy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelistedArbitrationRelayer(
      arbitrationPolicy: PromiseOrValue<string>,
      arbitrationRelayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isWhitelistedArbitrationRelayer(address,address)"(
      arbitrationPolicy: PromiseOrValue<string>,
      arbitrationRelayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelistedDisputeTag(
      tag: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isWhitelistedDisputeTag(bytes32)"(
      tag: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    raiseDispute(
      targetIpId: PromiseOrValue<string>,
      linkToDisputeEvidence: PromiseOrValue<string>,
      targetTag: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "raiseDispute(address,string,bytes32,bytes)"(
      targetIpId: PromiseOrValue<string>,
      linkToDisputeEvidence: PromiseOrValue<string>,
      targetTag: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveDispute(
      disputeId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "resolveDispute(uint256,bytes)"(
      disputeId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setArbitrationPolicy(
      ipId: PromiseOrValue<string>,
      arbitrationPolicy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setArbitrationPolicy(address,address)"(
      ipId: PromiseOrValue<string>,
      arbitrationPolicy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseArbitrationPolicy(
      arbitrationPolicy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBaseArbitrationPolicy(address)"(
      arbitrationPolicy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDisputeJudgement(
      disputeId: PromiseOrValue<BigNumberish>,
      decision: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDisputeJudgement(uint256,bool,bytes)"(
      disputeId: PromiseOrValue<BigNumberish>,
      decision: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    tagDerivativeIfParentInfringed(
      parentIpId: PromiseOrValue<string>,
      derivativeIpId: PromiseOrValue<string>,
      parentDisputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "tagDerivativeIfParentInfringed(address,address,uint256)"(
      parentIpId: PromiseOrValue<string>,
      derivativeIpId: PromiseOrValue<string>,
      parentDisputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistArbitrationPolicy(
      arbitrationPolicy: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "whitelistArbitrationPolicy(address,bool)"(
      arbitrationPolicy: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistArbitrationRelayer(
      arbitrationPolicy: PromiseOrValue<string>,
      arbPolicyRelayer: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "whitelistArbitrationRelayer(address,address,bool)"(
      arbitrationPolicy: PromiseOrValue<string>,
      arbPolicyRelayer: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistDisputeTag(
      tag: PromiseOrValue<BytesLike>,
      allowed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "whitelistDisputeTag(bytes32,bool)"(
      tag: PromiseOrValue<BytesLike>,
      allowed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ArbitrationPolicySet(address,address)"(
      ipId?: null,
      arbitrationPolicy?: null
    ): ArbitrationPolicySetEventFilter;
    ArbitrationPolicySet(
      ipId?: null,
      arbitrationPolicy?: null
    ): ArbitrationPolicySetEventFilter;

    "ArbitrationPolicyWhitelistUpdated(address,bool)"(
      arbitrationPolicy?: null,
      allowed?: null
    ): ArbitrationPolicyWhitelistUpdatedEventFilter;
    ArbitrationPolicyWhitelistUpdated(
      arbitrationPolicy?: null,
      allowed?: null
    ): ArbitrationPolicyWhitelistUpdatedEventFilter;

    "ArbitrationRelayerWhitelistUpdated(address,address,bool)"(
      arbitrationPolicy?: null,
      arbitrationRelayer?: null,
      allowed?: null
    ): ArbitrationRelayerWhitelistUpdatedEventFilter;
    ArbitrationRelayerWhitelistUpdated(
      arbitrationPolicy?: null,
      arbitrationRelayer?: null,
      allowed?: null
    ): ArbitrationRelayerWhitelistUpdatedEventFilter;

    "DefaultArbitrationPolicyUpdated(address)"(
      arbitrationPolicy?: null
    ): DefaultArbitrationPolicyUpdatedEventFilter;
    DefaultArbitrationPolicyUpdated(
      arbitrationPolicy?: null
    ): DefaultArbitrationPolicyUpdatedEventFilter;

    "DerivativeTaggedOnParentInfringement(address,address,uint256,bytes32)"(
      parentIpId?: null,
      derivativeIpId?: null,
      parentDisputeId?: null,
      tag?: null
    ): DerivativeTaggedOnParentInfringementEventFilter;
    DerivativeTaggedOnParentInfringement(
      parentIpId?: null,
      derivativeIpId?: null,
      parentDisputeId?: null,
      tag?: null
    ): DerivativeTaggedOnParentInfringementEventFilter;

    "DisputeCancelled(uint256,bytes)"(
      disputeId?: null,
      data?: null
    ): DisputeCancelledEventFilter;
    DisputeCancelled(
      disputeId?: null,
      data?: null
    ): DisputeCancelledEventFilter;

    "DisputeJudgementSet(uint256,bool,bytes)"(
      disputeId?: null,
      decision?: null,
      data?: null
    ): DisputeJudgementSetEventFilter;
    DisputeJudgementSet(
      disputeId?: null,
      decision?: null,
      data?: null
    ): DisputeJudgementSetEventFilter;

    "DisputeRaised(uint256,address,address,address,bytes32,bytes32,bytes)"(
      disputeId?: null,
      targetIpId?: null,
      disputeInitiator?: null,
      arbitrationPolicy?: null,
      linkToDisputeEvidence?: null,
      targetTag?: null,
      data?: null
    ): DisputeRaisedEventFilter;
    DisputeRaised(
      disputeId?: null,
      targetIpId?: null,
      disputeInitiator?: null,
      arbitrationPolicy?: null,
      linkToDisputeEvidence?: null,
      targetTag?: null,
      data?: null
    ): DisputeRaisedEventFilter;

    "DisputeResolved(uint256)"(disputeId?: null): DisputeResolvedEventFilter;
    DisputeResolved(disputeId?: null): DisputeResolvedEventFilter;

    "TagWhitelistUpdated(bytes32,bool)"(
      tag?: null,
      allowed?: null
    ): TagWhitelistUpdatedEventFilter;
    TagWhitelistUpdated(
      tag?: null,
      allowed?: null
    ): TagWhitelistUpdatedEventFilter;
  };

  estimateGas: {
    IN_DISPUTE(overrides?: CallOverrides): Promise<BigNumber>;

    "IN_DISPUTE()"(overrides?: CallOverrides): Promise<BigNumber>;

    arbitrationPolicies(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "arbitrationPolicies(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseArbitrationPolicy(overrides?: CallOverrides): Promise<BigNumber>;

    "baseArbitrationPolicy()"(overrides?: CallOverrides): Promise<BigNumber>;

    cancelDispute(
      disputeId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "cancelDispute(uint256,bytes)"(
      disputeId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disputeCounter(overrides?: CallOverrides): Promise<BigNumber>;

    "disputeCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

    disputes(
      disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "disputes(uint256)"(
      disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isIpTagged(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isIpTagged(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistedArbitrationPolicy(
      arbitrationPolicy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isWhitelistedArbitrationPolicy(address)"(
      arbitrationPolicy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistedArbitrationRelayer(
      arbitrationPolicy: PromiseOrValue<string>,
      arbitrationRelayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isWhitelistedArbitrationRelayer(address,address)"(
      arbitrationPolicy: PromiseOrValue<string>,
      arbitrationRelayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistedDisputeTag(
      tag: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isWhitelistedDisputeTag(bytes32)"(
      tag: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    raiseDispute(
      targetIpId: PromiseOrValue<string>,
      linkToDisputeEvidence: PromiseOrValue<string>,
      targetTag: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "raiseDispute(address,string,bytes32,bytes)"(
      targetIpId: PromiseOrValue<string>,
      linkToDisputeEvidence: PromiseOrValue<string>,
      targetTag: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolveDispute(
      disputeId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "resolveDispute(uint256,bytes)"(
      disputeId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setArbitrationPolicy(
      ipId: PromiseOrValue<string>,
      arbitrationPolicy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setArbitrationPolicy(address,address)"(
      ipId: PromiseOrValue<string>,
      arbitrationPolicy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBaseArbitrationPolicy(
      arbitrationPolicy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setBaseArbitrationPolicy(address)"(
      arbitrationPolicy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDisputeJudgement(
      disputeId: PromiseOrValue<BigNumberish>,
      decision: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setDisputeJudgement(uint256,bool,bytes)"(
      disputeId: PromiseOrValue<BigNumberish>,
      decision: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tagDerivativeIfParentInfringed(
      parentIpId: PromiseOrValue<string>,
      derivativeIpId: PromiseOrValue<string>,
      parentDisputeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "tagDerivativeIfParentInfringed(address,address,uint256)"(
      parentIpId: PromiseOrValue<string>,
      derivativeIpId: PromiseOrValue<string>,
      parentDisputeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistArbitrationPolicy(
      arbitrationPolicy: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "whitelistArbitrationPolicy(address,bool)"(
      arbitrationPolicy: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistArbitrationRelayer(
      arbitrationPolicy: PromiseOrValue<string>,
      arbPolicyRelayer: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "whitelistArbitrationRelayer(address,address,bool)"(
      arbitrationPolicy: PromiseOrValue<string>,
      arbPolicyRelayer: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistDisputeTag(
      tag: PromiseOrValue<BytesLike>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "whitelistDisputeTag(bytes32,bool)"(
      tag: PromiseOrValue<BytesLike>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    IN_DISPUTE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "IN_DISPUTE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    arbitrationPolicies(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "arbitrationPolicies(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseArbitrationPolicy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "baseArbitrationPolicy()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelDispute(
      disputeId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "cancelDispute(uint256,bytes)"(
      disputeId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disputeCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "disputeCounter()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disputes(
      disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "disputes(uint256)"(
      disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isIpTagged(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isIpTagged(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistedArbitrationPolicy(
      arbitrationPolicy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isWhitelistedArbitrationPolicy(address)"(
      arbitrationPolicy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistedArbitrationRelayer(
      arbitrationPolicy: PromiseOrValue<string>,
      arbitrationRelayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isWhitelistedArbitrationRelayer(address,address)"(
      arbitrationPolicy: PromiseOrValue<string>,
      arbitrationRelayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistedDisputeTag(
      tag: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isWhitelistedDisputeTag(bytes32)"(
      tag: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    raiseDispute(
      targetIpId: PromiseOrValue<string>,
      linkToDisputeEvidence: PromiseOrValue<string>,
      targetTag: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "raiseDispute(address,string,bytes32,bytes)"(
      targetIpId: PromiseOrValue<string>,
      linkToDisputeEvidence: PromiseOrValue<string>,
      targetTag: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolveDispute(
      disputeId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "resolveDispute(uint256,bytes)"(
      disputeId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setArbitrationPolicy(
      ipId: PromiseOrValue<string>,
      arbitrationPolicy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setArbitrationPolicy(address,address)"(
      ipId: PromiseOrValue<string>,
      arbitrationPolicy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBaseArbitrationPolicy(
      arbitrationPolicy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setBaseArbitrationPolicy(address)"(
      arbitrationPolicy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDisputeJudgement(
      disputeId: PromiseOrValue<BigNumberish>,
      decision: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setDisputeJudgement(uint256,bool,bytes)"(
      disputeId: PromiseOrValue<BigNumberish>,
      decision: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tagDerivativeIfParentInfringed(
      parentIpId: PromiseOrValue<string>,
      derivativeIpId: PromiseOrValue<string>,
      parentDisputeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "tagDerivativeIfParentInfringed(address,address,uint256)"(
      parentIpId: PromiseOrValue<string>,
      derivativeIpId: PromiseOrValue<string>,
      parentDisputeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistArbitrationPolicy(
      arbitrationPolicy: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "whitelistArbitrationPolicy(address,bool)"(
      arbitrationPolicy: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistArbitrationRelayer(
      arbitrationPolicy: PromiseOrValue<string>,
      arbPolicyRelayer: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "whitelistArbitrationRelayer(address,address,bool)"(
      arbitrationPolicy: PromiseOrValue<string>,
      arbPolicyRelayer: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistDisputeTag(
      tag: PromiseOrValue<BytesLike>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "whitelistDisputeTag(bytes32,bool)"(
      tag: PromiseOrValue<BytesLike>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
