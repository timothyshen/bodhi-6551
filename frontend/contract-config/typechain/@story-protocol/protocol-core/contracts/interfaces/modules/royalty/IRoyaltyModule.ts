/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export interface IRoyaltyModuleInterface extends utils.Interface {
  functions: {
    "isWhitelistedRoyaltyPolicy(address)": FunctionFragment;
    "isWhitelistedRoyaltyToken(address)": FunctionFragment;
    "licensingModule()": FunctionFragment;
    "name()": FunctionFragment;
    "onLicenseMinting(address,address,bytes,bytes)": FunctionFragment;
    "onLinkToParents(address,address,address[],bytes[],bytes)": FunctionFragment;
    "payLicenseMintingFee(address,address,address,address,uint256)": FunctionFragment;
    "payRoyaltyOnBehalf(address,address,address,uint256)": FunctionFragment;
    "royaltyPolicies(address)": FunctionFragment;
    "setLicensingModule(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "whitelistRoyaltyPolicy(address,bool)": FunctionFragment;
    "whitelistRoyaltyToken(address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "isWhitelistedRoyaltyPolicy"
      | "isWhitelistedRoyaltyPolicy(address)"
      | "isWhitelistedRoyaltyToken"
      | "isWhitelistedRoyaltyToken(address)"
      | "licensingModule"
      | "licensingModule()"
      | "name"
      | "name()"
      | "onLicenseMinting"
      | "onLicenseMinting(address,address,bytes,bytes)"
      | "onLinkToParents"
      | "onLinkToParents(address,address,address[],bytes[],bytes)"
      | "payLicenseMintingFee"
      | "payLicenseMintingFee(address,address,address,address,uint256)"
      | "payRoyaltyOnBehalf"
      | "payRoyaltyOnBehalf(address,address,address,uint256)"
      | "royaltyPolicies"
      | "royaltyPolicies(address)"
      | "setLicensingModule"
      | "setLicensingModule(address)"
      | "supportsInterface"
      | "supportsInterface(bytes4)"
      | "whitelistRoyaltyPolicy"
      | "whitelistRoyaltyPolicy(address,bool)"
      | "whitelistRoyaltyToken"
      | "whitelistRoyaltyToken(address,bool)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "isWhitelistedRoyaltyPolicy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedRoyaltyPolicy(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedRoyaltyToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedRoyaltyToken(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "licensingModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "licensingModule()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "name()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onLicenseMinting",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onLicenseMinting(address,address,bytes,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onLinkToParents",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onLinkToParents(address,address,address[],bytes[],bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "payLicenseMintingFee",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "payLicenseMintingFee(address,address,address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "payRoyaltyOnBehalf",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "payRoyaltyOnBehalf(address,address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyPolicies",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyPolicies(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLicensingModule",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLicensingModule(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface(bytes4)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistRoyaltyPolicy",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistRoyaltyPolicy(address,bool)",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistRoyaltyToken",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistRoyaltyToken(address,bool)",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(
    functionFragment: "isWhitelistedRoyaltyPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedRoyaltyPolicy(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedRoyaltyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedRoyaltyToken(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "licensingModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "licensingModule()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onLicenseMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onLicenseMinting(address,address,bytes,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onLinkToParents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onLinkToParents(address,address,address[],bytes[],bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payLicenseMintingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payLicenseMintingFee(address,address,address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payRoyaltyOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payRoyaltyOnBehalf(address,address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyPolicies(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLicensingModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLicensingModule(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistRoyaltyPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistRoyaltyPolicy(address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistRoyaltyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistRoyaltyToken(address,bool)",
    data: BytesLike
  ): Result;

  events: {
    "LicenseMintingFeePaid(address,address,address,uint256)": EventFragment;
    "RoyaltyPaid(address,address,address,address,uint256)": EventFragment;
    "RoyaltyPolicyWhitelistUpdated(address,bool)": EventFragment;
    "RoyaltyTokenWhitelistUpdated(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LicenseMintingFeePaid"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LicenseMintingFeePaid(address,address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltyPaid"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoyaltyPaid(address,address,address,address,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoyaltyPolicyWhitelistUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoyaltyPolicyWhitelistUpdated(address,bool)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoyaltyTokenWhitelistUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoyaltyTokenWhitelistUpdated(address,bool)"
  ): EventFragment;
}

export interface LicenseMintingFeePaidEventObject {
  receiverIpId: string;
  payerAddress: string;
  token: string;
  amount: BigNumber;
}
export type LicenseMintingFeePaidEvent = TypedEvent<
  [string, string, string, BigNumber],
  LicenseMintingFeePaidEventObject
>;

export type LicenseMintingFeePaidEventFilter =
  TypedEventFilter<LicenseMintingFeePaidEvent>;

export interface RoyaltyPaidEventObject {
  receiverIpId: string;
  payerIpId: string;
  sender: string;
  token: string;
  amount: BigNumber;
}
export type RoyaltyPaidEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  RoyaltyPaidEventObject
>;

export type RoyaltyPaidEventFilter = TypedEventFilter<RoyaltyPaidEvent>;

export interface RoyaltyPolicyWhitelistUpdatedEventObject {
  royaltyPolicy: string;
  allowed: boolean;
}
export type RoyaltyPolicyWhitelistUpdatedEvent = TypedEvent<
  [string, boolean],
  RoyaltyPolicyWhitelistUpdatedEventObject
>;

export type RoyaltyPolicyWhitelistUpdatedEventFilter =
  TypedEventFilter<RoyaltyPolicyWhitelistUpdatedEvent>;

export interface RoyaltyTokenWhitelistUpdatedEventObject {
  token: string;
  allowed: boolean;
}
export type RoyaltyTokenWhitelistUpdatedEvent = TypedEvent<
  [string, boolean],
  RoyaltyTokenWhitelistUpdatedEventObject
>;

export type RoyaltyTokenWhitelistUpdatedEventFilter =
  TypedEventFilter<RoyaltyTokenWhitelistUpdatedEvent>;

export interface IRoyaltyModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRoyaltyModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isWhitelistedRoyaltyPolicy(
      royaltyPolicy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isWhitelistedRoyaltyPolicy(address)"(
      royaltyPolicy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelistedRoyaltyToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isWhitelistedRoyaltyToken(address)"(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    licensingModule(overrides?: CallOverrides): Promise<[string]>;

    "licensingModule()"(overrides?: CallOverrides): Promise<[string]>;

    name(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "name()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onLicenseMinting(
      ipId: PromiseOrValue<string>,
      royaltyPolicy: PromiseOrValue<string>,
      licenseData: PromiseOrValue<BytesLike>,
      externalData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "onLicenseMinting(address,address,bytes,bytes)"(
      ipId: PromiseOrValue<string>,
      royaltyPolicy: PromiseOrValue<string>,
      licenseData: PromiseOrValue<BytesLike>,
      externalData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onLinkToParents(
      ipId: PromiseOrValue<string>,
      royaltyPolicy: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseData: PromiseOrValue<BytesLike>[],
      externalData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "onLinkToParents(address,address,address[],bytes[],bytes)"(
      ipId: PromiseOrValue<string>,
      royaltyPolicy: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseData: PromiseOrValue<BytesLike>[],
      externalData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payLicenseMintingFee(
      receiverIpId: PromiseOrValue<string>,
      payerAddress: PromiseOrValue<string>,
      licenseRoyaltyPolicy: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "payLicenseMintingFee(address,address,address,address,uint256)"(
      receiverIpId: PromiseOrValue<string>,
      payerAddress: PromiseOrValue<string>,
      licenseRoyaltyPolicy: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payRoyaltyOnBehalf(
      receiverIpId: PromiseOrValue<string>,
      payerIpId: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "payRoyaltyOnBehalf(address,address,address,uint256)"(
      receiverIpId: PromiseOrValue<string>,
      payerIpId: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    royaltyPolicies(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "royaltyPolicies(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setLicensingModule(
      licensing: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setLicensingModule(address)"(
      licensing: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    whitelistRoyaltyPolicy(
      royaltyPolicy: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "whitelistRoyaltyPolicy(address,bool)"(
      royaltyPolicy: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistRoyaltyToken(
      token: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "whitelistRoyaltyToken(address,bool)"(
      token: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  isWhitelistedRoyaltyPolicy(
    royaltyPolicy: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isWhitelistedRoyaltyPolicy(address)"(
    royaltyPolicy: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelistedRoyaltyToken(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isWhitelistedRoyaltyToken(address)"(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  licensingModule(overrides?: CallOverrides): Promise<string>;

  "licensingModule()"(overrides?: CallOverrides): Promise<string>;

  name(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "name()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onLicenseMinting(
    ipId: PromiseOrValue<string>,
    royaltyPolicy: PromiseOrValue<string>,
    licenseData: PromiseOrValue<BytesLike>,
    externalData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "onLicenseMinting(address,address,bytes,bytes)"(
    ipId: PromiseOrValue<string>,
    royaltyPolicy: PromiseOrValue<string>,
    licenseData: PromiseOrValue<BytesLike>,
    externalData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onLinkToParents(
    ipId: PromiseOrValue<string>,
    royaltyPolicy: PromiseOrValue<string>,
    parentIpIds: PromiseOrValue<string>[],
    licenseData: PromiseOrValue<BytesLike>[],
    externalData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "onLinkToParents(address,address,address[],bytes[],bytes)"(
    ipId: PromiseOrValue<string>,
    royaltyPolicy: PromiseOrValue<string>,
    parentIpIds: PromiseOrValue<string>[],
    licenseData: PromiseOrValue<BytesLike>[],
    externalData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payLicenseMintingFee(
    receiverIpId: PromiseOrValue<string>,
    payerAddress: PromiseOrValue<string>,
    licenseRoyaltyPolicy: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "payLicenseMintingFee(address,address,address,address,uint256)"(
    receiverIpId: PromiseOrValue<string>,
    payerAddress: PromiseOrValue<string>,
    licenseRoyaltyPolicy: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payRoyaltyOnBehalf(
    receiverIpId: PromiseOrValue<string>,
    payerIpId: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "payRoyaltyOnBehalf(address,address,address,uint256)"(
    receiverIpId: PromiseOrValue<string>,
    payerIpId: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  royaltyPolicies(
    ipId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  "royaltyPolicies(address)"(
    ipId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  setLicensingModule(
    licensing: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setLicensingModule(address)"(
    licensing: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  whitelistRoyaltyPolicy(
    royaltyPolicy: PromiseOrValue<string>,
    allowed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "whitelistRoyaltyPolicy(address,bool)"(
    royaltyPolicy: PromiseOrValue<string>,
    allowed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistRoyaltyToken(
    token: PromiseOrValue<string>,
    allowed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "whitelistRoyaltyToken(address,bool)"(
    token: PromiseOrValue<string>,
    allowed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    isWhitelistedRoyaltyPolicy(
      royaltyPolicy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isWhitelistedRoyaltyPolicy(address)"(
      royaltyPolicy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelistedRoyaltyToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isWhitelistedRoyaltyToken(address)"(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    licensingModule(overrides?: CallOverrides): Promise<string>;

    "licensingModule()"(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    onLicenseMinting(
      ipId: PromiseOrValue<string>,
      royaltyPolicy: PromiseOrValue<string>,
      licenseData: PromiseOrValue<BytesLike>,
      externalData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "onLicenseMinting(address,address,bytes,bytes)"(
      ipId: PromiseOrValue<string>,
      royaltyPolicy: PromiseOrValue<string>,
      licenseData: PromiseOrValue<BytesLike>,
      externalData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    onLinkToParents(
      ipId: PromiseOrValue<string>,
      royaltyPolicy: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseData: PromiseOrValue<BytesLike>[],
      externalData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "onLinkToParents(address,address,address[],bytes[],bytes)"(
      ipId: PromiseOrValue<string>,
      royaltyPolicy: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseData: PromiseOrValue<BytesLike>[],
      externalData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    payLicenseMintingFee(
      receiverIpId: PromiseOrValue<string>,
      payerAddress: PromiseOrValue<string>,
      licenseRoyaltyPolicy: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "payLicenseMintingFee(address,address,address,address,uint256)"(
      receiverIpId: PromiseOrValue<string>,
      payerAddress: PromiseOrValue<string>,
      licenseRoyaltyPolicy: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    payRoyaltyOnBehalf(
      receiverIpId: PromiseOrValue<string>,
      payerIpId: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "payRoyaltyOnBehalf(address,address,address,uint256)"(
      receiverIpId: PromiseOrValue<string>,
      payerIpId: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    royaltyPolicies(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "royaltyPolicies(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    setLicensingModule(
      licensing: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLicensingModule(address)"(
      licensing: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    whitelistRoyaltyPolicy(
      royaltyPolicy: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "whitelistRoyaltyPolicy(address,bool)"(
      royaltyPolicy: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistRoyaltyToken(
      token: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "whitelistRoyaltyToken(address,bool)"(
      token: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LicenseMintingFeePaid(address,address,address,uint256)"(
      receiverIpId?: null,
      payerAddress?: null,
      token?: null,
      amount?: null
    ): LicenseMintingFeePaidEventFilter;
    LicenseMintingFeePaid(
      receiverIpId?: null,
      payerAddress?: null,
      token?: null,
      amount?: null
    ): LicenseMintingFeePaidEventFilter;

    "RoyaltyPaid(address,address,address,address,uint256)"(
      receiverIpId?: null,
      payerIpId?: null,
      sender?: null,
      token?: null,
      amount?: null
    ): RoyaltyPaidEventFilter;
    RoyaltyPaid(
      receiverIpId?: null,
      payerIpId?: null,
      sender?: null,
      token?: null,
      amount?: null
    ): RoyaltyPaidEventFilter;

    "RoyaltyPolicyWhitelistUpdated(address,bool)"(
      royaltyPolicy?: null,
      allowed?: null
    ): RoyaltyPolicyWhitelistUpdatedEventFilter;
    RoyaltyPolicyWhitelistUpdated(
      royaltyPolicy?: null,
      allowed?: null
    ): RoyaltyPolicyWhitelistUpdatedEventFilter;

    "RoyaltyTokenWhitelistUpdated(address,bool)"(
      token?: null,
      allowed?: null
    ): RoyaltyTokenWhitelistUpdatedEventFilter;
    RoyaltyTokenWhitelistUpdated(
      token?: null,
      allowed?: null
    ): RoyaltyTokenWhitelistUpdatedEventFilter;
  };

  estimateGas: {
    isWhitelistedRoyaltyPolicy(
      royaltyPolicy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isWhitelistedRoyaltyPolicy(address)"(
      royaltyPolicy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistedRoyaltyToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isWhitelistedRoyaltyToken(address)"(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    licensingModule(overrides?: CallOverrides): Promise<BigNumber>;

    "licensingModule()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "name()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onLicenseMinting(
      ipId: PromiseOrValue<string>,
      royaltyPolicy: PromiseOrValue<string>,
      licenseData: PromiseOrValue<BytesLike>,
      externalData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "onLicenseMinting(address,address,bytes,bytes)"(
      ipId: PromiseOrValue<string>,
      royaltyPolicy: PromiseOrValue<string>,
      licenseData: PromiseOrValue<BytesLike>,
      externalData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onLinkToParents(
      ipId: PromiseOrValue<string>,
      royaltyPolicy: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseData: PromiseOrValue<BytesLike>[],
      externalData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "onLinkToParents(address,address,address[],bytes[],bytes)"(
      ipId: PromiseOrValue<string>,
      royaltyPolicy: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseData: PromiseOrValue<BytesLike>[],
      externalData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payLicenseMintingFee(
      receiverIpId: PromiseOrValue<string>,
      payerAddress: PromiseOrValue<string>,
      licenseRoyaltyPolicy: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "payLicenseMintingFee(address,address,address,address,uint256)"(
      receiverIpId: PromiseOrValue<string>,
      payerAddress: PromiseOrValue<string>,
      licenseRoyaltyPolicy: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payRoyaltyOnBehalf(
      receiverIpId: PromiseOrValue<string>,
      payerIpId: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "payRoyaltyOnBehalf(address,address,address,uint256)"(
      receiverIpId: PromiseOrValue<string>,
      payerIpId: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    royaltyPolicies(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "royaltyPolicies(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setLicensingModule(
      licensing: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setLicensingModule(address)"(
      licensing: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistRoyaltyPolicy(
      royaltyPolicy: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "whitelistRoyaltyPolicy(address,bool)"(
      royaltyPolicy: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistRoyaltyToken(
      token: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "whitelistRoyaltyToken(address,bool)"(
      token: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isWhitelistedRoyaltyPolicy(
      royaltyPolicy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isWhitelistedRoyaltyPolicy(address)"(
      royaltyPolicy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistedRoyaltyToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isWhitelistedRoyaltyToken(address)"(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    licensingModule(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "licensingModule()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "name()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onLicenseMinting(
      ipId: PromiseOrValue<string>,
      royaltyPolicy: PromiseOrValue<string>,
      licenseData: PromiseOrValue<BytesLike>,
      externalData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "onLicenseMinting(address,address,bytes,bytes)"(
      ipId: PromiseOrValue<string>,
      royaltyPolicy: PromiseOrValue<string>,
      licenseData: PromiseOrValue<BytesLike>,
      externalData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onLinkToParents(
      ipId: PromiseOrValue<string>,
      royaltyPolicy: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseData: PromiseOrValue<BytesLike>[],
      externalData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "onLinkToParents(address,address,address[],bytes[],bytes)"(
      ipId: PromiseOrValue<string>,
      royaltyPolicy: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseData: PromiseOrValue<BytesLike>[],
      externalData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payLicenseMintingFee(
      receiverIpId: PromiseOrValue<string>,
      payerAddress: PromiseOrValue<string>,
      licenseRoyaltyPolicy: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "payLicenseMintingFee(address,address,address,address,uint256)"(
      receiverIpId: PromiseOrValue<string>,
      payerAddress: PromiseOrValue<string>,
      licenseRoyaltyPolicy: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payRoyaltyOnBehalf(
      receiverIpId: PromiseOrValue<string>,
      payerIpId: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "payRoyaltyOnBehalf(address,address,address,uint256)"(
      receiverIpId: PromiseOrValue<string>,
      payerIpId: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    royaltyPolicies(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "royaltyPolicies(address)"(
      ipId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setLicensingModule(
      licensing: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setLicensingModule(address)"(
      licensing: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistRoyaltyPolicy(
      royaltyPolicy: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "whitelistRoyaltyPolicy(address,bool)"(
      royaltyPolicy: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistRoyaltyToken(
      token: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "whitelistRoyaltyToken(address,bool)"(
      token: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
