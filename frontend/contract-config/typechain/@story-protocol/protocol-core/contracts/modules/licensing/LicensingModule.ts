/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface LicensingModuleInterface extends utils.Interface {
  functions: {
    "ACCESS_CONTROLLER()": FunctionFragment;
    "DISPUTE_MODULE()": FunctionFragment;
    "IP_ACCOUNT_REGISTRY()": FunctionFragment;
    "LICENSE_NFT()": FunctionFragment;
    "LICENSE_REGISTRY()": FunctionFragment;
    "ROYALTY_MODULE()": FunctionFragment;
    "UPGRADE_INTERFACE_VERSION()": FunctionFragment;
    "__ProtocolPausable_init(address)": FunctionFragment;
    "attachLicenseTerms(address,address,uint256)": FunctionFragment;
    "authority()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isConsumingScheduledOp()": FunctionFragment;
    "mintLicenseTokens(address,address,uint256,uint256,address,bytes)": FunctionFragment;
    "name()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "registerDerivative(address,address[],uint256[],address,bytes)": FunctionFragment;
    "registerDerivativeWithLicenseTokens(address,uint256[],bytes)": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unpause()": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ACCESS_CONTROLLER"
      | "ACCESS_CONTROLLER()"
      | "DISPUTE_MODULE"
      | "DISPUTE_MODULE()"
      | "IP_ACCOUNT_REGISTRY"
      | "IP_ACCOUNT_REGISTRY()"
      | "LICENSE_NFT"
      | "LICENSE_NFT()"
      | "LICENSE_REGISTRY"
      | "LICENSE_REGISTRY()"
      | "ROYALTY_MODULE"
      | "ROYALTY_MODULE()"
      | "UPGRADE_INTERFACE_VERSION"
      | "UPGRADE_INTERFACE_VERSION()"
      | "__ProtocolPausable_init"
      | "__ProtocolPausable_init(address)"
      | "attachLicenseTerms"
      | "attachLicenseTerms(address,address,uint256)"
      | "authority"
      | "authority()"
      | "initialize"
      | "initialize(address)"
      | "isConsumingScheduledOp"
      | "isConsumingScheduledOp()"
      | "mintLicenseTokens"
      | "mintLicenseTokens(address,address,uint256,uint256,address,bytes)"
      | "name"
      | "name()"
      | "pause"
      | "pause()"
      | "paused"
      | "paused()"
      | "proxiableUUID"
      | "proxiableUUID()"
      | "registerDerivative"
      | "registerDerivative(address,address[],uint256[],address,bytes)"
      | "registerDerivativeWithLicenseTokens"
      | "registerDerivativeWithLicenseTokens(address,uint256[],bytes)"
      | "setAuthority"
      | "setAuthority(address)"
      | "supportsInterface"
      | "supportsInterface(bytes4)"
      | "unpause"
      | "unpause()"
      | "upgradeToAndCall"
      | "upgradeToAndCall(address,bytes)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ACCESS_CONTROLLER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ACCESS_CONTROLLER()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DISPUTE_MODULE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DISPUTE_MODULE()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IP_ACCOUNT_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IP_ACCOUNT_REGISTRY()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LICENSE_NFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LICENSE_NFT()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LICENSE_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LICENSE_REGISTRY()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROYALTY_MODULE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROYALTY_MODULE()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__ProtocolPausable_init",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "__ProtocolPausable_init(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "attachLicenseTerms",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "attachLicenseTerms(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "authority()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isConsumingScheduledOp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isConsumingScheduledOp()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintLicenseTokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintLicenseTokens(address,address,uint256,uint256,address,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "name()", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause()", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerDerivative",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDerivative(address,address[],uint256[],address,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDerivativeWithLicenseTokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDerivativeWithLicenseTokens(address,uint256[],bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthority(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface(bytes4)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall(address,bytes)",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "ACCESS_CONTROLLER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ACCESS_CONTROLLER()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DISPUTE_MODULE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DISPUTE_MODULE()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IP_ACCOUNT_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IP_ACCOUNT_REGISTRY()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LICENSE_NFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LICENSE_NFT()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LICENSE_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LICENSE_REGISTRY()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROYALTY_MODULE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROYALTY_MODULE()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__ProtocolPausable_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__ProtocolPausable_init(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attachLicenseTerms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attachLicenseTerms(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authority()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialize(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isConsumingScheduledOp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isConsumingScheduledOp()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintLicenseTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintLicenseTokens(address,address,uint256,uint256,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDerivative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDerivative(address,address[],uint256[],address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDerivativeWithLicenseTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDerivativeWithLicenseTokens(address,uint256[],bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall(address,bytes)",
    data: BytesLike
  ): Result;

  events: {
    "AuthorityUpdated(address)": EventFragment;
    "DerivativeRegistered(address,address,uint256[],address[],uint256[],address)": EventFragment;
    "Initialized(uint64)": EventFragment;
    "LicenseTermsAttached(address,address,address,uint256)": EventFragment;
    "LicenseTokensMinted(address,address,address,uint256,uint256,address,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated(address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DerivativeRegistered"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DerivativeRegistered(address,address,uint256[],address[],uint256[],address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized(uint64)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LicenseTermsAttached"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LicenseTermsAttached(address,address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LicenseTokensMinted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LicenseTokensMinted(address,address,address,uint256,uint256,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused(address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused(address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded(address)"): EventFragment;
}

export interface AuthorityUpdatedEventObject {
  authority: string;
}
export type AuthorityUpdatedEvent = TypedEvent<
  [string],
  AuthorityUpdatedEventObject
>;

export type AuthorityUpdatedEventFilter =
  TypedEventFilter<AuthorityUpdatedEvent>;

export interface DerivativeRegisteredEventObject {
  caller: string;
  childIpId: string;
  licenseTokenIds: BigNumber[];
  parentIpIds: string[];
  licenseTermsIds: BigNumber[];
  licenseTemplate: string;
}
export type DerivativeRegisteredEvent = TypedEvent<
  [string, string, BigNumber[], string[], BigNumber[], string],
  DerivativeRegisteredEventObject
>;

export type DerivativeRegisteredEventFilter =
  TypedEventFilter<DerivativeRegisteredEvent>;

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LicenseTermsAttachedEventObject {
  caller: string;
  ipId: string;
  licenseTemplate: string;
  licenseTermsId: BigNumber;
}
export type LicenseTermsAttachedEvent = TypedEvent<
  [string, string, string, BigNumber],
  LicenseTermsAttachedEventObject
>;

export type LicenseTermsAttachedEventFilter =
  TypedEventFilter<LicenseTermsAttachedEvent>;

export interface LicenseTokensMintedEventObject {
  caller: string;
  licensorIpId: string;
  licenseTemplate: string;
  licenseTermsId: BigNumber;
  amount: BigNumber;
  receiver: string;
  startLicenseTokenId: BigNumber;
}
export type LicenseTokensMintedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, string, BigNumber],
  LicenseTokensMintedEventObject
>;

export type LicenseTokensMintedEventFilter =
  TypedEventFilter<LicenseTokensMintedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface LicensingModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LicensingModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ACCESS_CONTROLLER(overrides?: CallOverrides): Promise<[string]>;

    "ACCESS_CONTROLLER()"(overrides?: CallOverrides): Promise<[string]>;

    DISPUTE_MODULE(overrides?: CallOverrides): Promise<[string]>;

    "DISPUTE_MODULE()"(overrides?: CallOverrides): Promise<[string]>;

    IP_ACCOUNT_REGISTRY(overrides?: CallOverrides): Promise<[string]>;

    "IP_ACCOUNT_REGISTRY()"(overrides?: CallOverrides): Promise<[string]>;

    LICENSE_NFT(overrides?: CallOverrides): Promise<[string]>;

    "LICENSE_NFT()"(overrides?: CallOverrides): Promise<[string]>;

    LICENSE_REGISTRY(overrides?: CallOverrides): Promise<[string]>;

    "LICENSE_REGISTRY()"(overrides?: CallOverrides): Promise<[string]>;

    ROYALTY_MODULE(overrides?: CallOverrides): Promise<[string]>;

    "ROYALTY_MODULE()"(overrides?: CallOverrides): Promise<[string]>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<[string]>;

    "UPGRADE_INTERFACE_VERSION()"(overrides?: CallOverrides): Promise<[string]>;

    __ProtocolPausable_init(
      accessManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "__ProtocolPausable_init(address)"(
      accessManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    attachLicenseTerms(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "attachLicenseTerms(address,address,uint256)"(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authority(overrides?: CallOverrides): Promise<[string]>;

    "authority()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      accessManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      accessManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isConsumingScheduledOp(overrides?: CallOverrides): Promise<[string]>;

    "isConsumingScheduledOp()"(overrides?: CallOverrides): Promise<[string]>;

    mintLicenseTokens(
      licensorIpId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mintLicenseTokens(address,address,uint256,uint256,address,bytes)"(
      licensorIpId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<[string]>;

    registerDerivative(
      childIpId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      licenseTemplate: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerDerivative(address,address[],uint256[],address,bytes)"(
      childIpId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      licenseTemplate: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerDerivativeWithLicenseTokens(
      childIpId: PromiseOrValue<string>,
      licenseTokenIds: PromiseOrValue<BigNumberish>[],
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerDerivativeWithLicenseTokens(address,uint256[],bytes)"(
      childIpId: PromiseOrValue<string>,
      licenseTokenIds: PromiseOrValue<BigNumberish>[],
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setAuthority(address)"(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ACCESS_CONTROLLER(overrides?: CallOverrides): Promise<string>;

  "ACCESS_CONTROLLER()"(overrides?: CallOverrides): Promise<string>;

  DISPUTE_MODULE(overrides?: CallOverrides): Promise<string>;

  "DISPUTE_MODULE()"(overrides?: CallOverrides): Promise<string>;

  IP_ACCOUNT_REGISTRY(overrides?: CallOverrides): Promise<string>;

  "IP_ACCOUNT_REGISTRY()"(overrides?: CallOverrides): Promise<string>;

  LICENSE_NFT(overrides?: CallOverrides): Promise<string>;

  "LICENSE_NFT()"(overrides?: CallOverrides): Promise<string>;

  LICENSE_REGISTRY(overrides?: CallOverrides): Promise<string>;

  "LICENSE_REGISTRY()"(overrides?: CallOverrides): Promise<string>;

  ROYALTY_MODULE(overrides?: CallOverrides): Promise<string>;

  "ROYALTY_MODULE()"(overrides?: CallOverrides): Promise<string>;

  UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

  "UPGRADE_INTERFACE_VERSION()"(overrides?: CallOverrides): Promise<string>;

  __ProtocolPausable_init(
    accessManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "__ProtocolPausable_init(address)"(
    accessManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  attachLicenseTerms(
    ipId: PromiseOrValue<string>,
    licenseTemplate: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "attachLicenseTerms(address,address,uint256)"(
    ipId: PromiseOrValue<string>,
    licenseTemplate: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authority(overrides?: CallOverrides): Promise<string>;

  "authority()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    accessManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    accessManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isConsumingScheduledOp(overrides?: CallOverrides): Promise<string>;

  "isConsumingScheduledOp()"(overrides?: CallOverrides): Promise<string>;

  mintLicenseTokens(
    licensorIpId: PromiseOrValue<string>,
    licenseTemplate: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    royaltyContext: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mintLicenseTokens(address,address,uint256,uint256,address,bytes)"(
    licensorIpId: PromiseOrValue<string>,
    licenseTemplate: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    royaltyContext: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "pause()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

  registerDerivative(
    childIpId: PromiseOrValue<string>,
    parentIpIds: PromiseOrValue<string>[],
    licenseTermsIds: PromiseOrValue<BigNumberish>[],
    licenseTemplate: PromiseOrValue<string>,
    royaltyContext: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerDerivative(address,address[],uint256[],address,bytes)"(
    childIpId: PromiseOrValue<string>,
    parentIpIds: PromiseOrValue<string>[],
    licenseTermsIds: PromiseOrValue<BigNumberish>[],
    licenseTemplate: PromiseOrValue<string>,
    royaltyContext: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerDerivativeWithLicenseTokens(
    childIpId: PromiseOrValue<string>,
    licenseTokenIds: PromiseOrValue<BigNumberish>[],
    royaltyContext: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerDerivativeWithLicenseTokens(address,uint256[],bytes)"(
    childIpId: PromiseOrValue<string>,
    licenseTokenIds: PromiseOrValue<BigNumberish>[],
    royaltyContext: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAuthority(
    newAuthority: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setAuthority(address)"(
    newAuthority: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "unpause()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "upgradeToAndCall(address,bytes)"(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ACCESS_CONTROLLER(overrides?: CallOverrides): Promise<string>;

    "ACCESS_CONTROLLER()"(overrides?: CallOverrides): Promise<string>;

    DISPUTE_MODULE(overrides?: CallOverrides): Promise<string>;

    "DISPUTE_MODULE()"(overrides?: CallOverrides): Promise<string>;

    IP_ACCOUNT_REGISTRY(overrides?: CallOverrides): Promise<string>;

    "IP_ACCOUNT_REGISTRY()"(overrides?: CallOverrides): Promise<string>;

    LICENSE_NFT(overrides?: CallOverrides): Promise<string>;

    "LICENSE_NFT()"(overrides?: CallOverrides): Promise<string>;

    LICENSE_REGISTRY(overrides?: CallOverrides): Promise<string>;

    "LICENSE_REGISTRY()"(overrides?: CallOverrides): Promise<string>;

    ROYALTY_MODULE(overrides?: CallOverrides): Promise<string>;

    "ROYALTY_MODULE()"(overrides?: CallOverrides): Promise<string>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

    "UPGRADE_INTERFACE_VERSION()"(overrides?: CallOverrides): Promise<string>;

    __ProtocolPausable_init(
      accessManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "__ProtocolPausable_init(address)"(
      accessManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    attachLicenseTerms(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "attachLicenseTerms(address,address,uint256)"(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    authority(overrides?: CallOverrides): Promise<string>;

    "authority()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      accessManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address)"(
      accessManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isConsumingScheduledOp(overrides?: CallOverrides): Promise<string>;

    "isConsumingScheduledOp()"(overrides?: CallOverrides): Promise<string>;

    mintLicenseTokens(
      licensorIpId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mintLicenseTokens(address,address,uint256,uint256,address,bytes)"(
      licensorIpId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

    registerDerivative(
      childIpId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      licenseTemplate: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerDerivative(address,address[],uint256[],address,bytes)"(
      childIpId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      licenseTemplate: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerDerivativeWithLicenseTokens(
      childIpId: PromiseOrValue<string>,
      licenseTokenIds: PromiseOrValue<BigNumberish>[],
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerDerivativeWithLicenseTokens(address,uint256[],bytes)"(
      childIpId: PromiseOrValue<string>,
      licenseTokenIds: PromiseOrValue<BigNumberish>[],
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAuthority(address)"(
      newAuthority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AuthorityUpdated(address)"(authority?: null): AuthorityUpdatedEventFilter;
    AuthorityUpdated(authority?: null): AuthorityUpdatedEventFilter;

    "DerivativeRegistered(address,address,uint256[],address[],uint256[],address)"(
      caller?: PromiseOrValue<string> | null,
      childIpId?: PromiseOrValue<string> | null,
      licenseTokenIds?: null,
      parentIpIds?: null,
      licenseTermsIds?: null,
      licenseTemplate?: null
    ): DerivativeRegisteredEventFilter;
    DerivativeRegistered(
      caller?: PromiseOrValue<string> | null,
      childIpId?: PromiseOrValue<string> | null,
      licenseTokenIds?: null,
      parentIpIds?: null,
      licenseTermsIds?: null,
      licenseTemplate?: null
    ): DerivativeRegisteredEventFilter;

    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LicenseTermsAttached(address,address,address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      ipId?: PromiseOrValue<string> | null,
      licenseTemplate?: null,
      licenseTermsId?: null
    ): LicenseTermsAttachedEventFilter;
    LicenseTermsAttached(
      caller?: PromiseOrValue<string> | null,
      ipId?: PromiseOrValue<string> | null,
      licenseTemplate?: null,
      licenseTermsId?: null
    ): LicenseTermsAttachedEventFilter;

    "LicenseTokensMinted(address,address,address,uint256,uint256,address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      licensorIpId?: PromiseOrValue<string> | null,
      licenseTemplate?: null,
      licenseTermsId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      receiver?: null,
      startLicenseTokenId?: null
    ): LicenseTokensMintedEventFilter;
    LicenseTokensMinted(
      caller?: PromiseOrValue<string> | null,
      licensorIpId?: PromiseOrValue<string> | null,
      licenseTemplate?: null,
      licenseTermsId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      receiver?: null,
      startLicenseTokenId?: null
    ): LicenseTokensMintedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    ACCESS_CONTROLLER(overrides?: CallOverrides): Promise<BigNumber>;

    "ACCESS_CONTROLLER()"(overrides?: CallOverrides): Promise<BigNumber>;

    DISPUTE_MODULE(overrides?: CallOverrides): Promise<BigNumber>;

    "DISPUTE_MODULE()"(overrides?: CallOverrides): Promise<BigNumber>;

    IP_ACCOUNT_REGISTRY(overrides?: CallOverrides): Promise<BigNumber>;

    "IP_ACCOUNT_REGISTRY()"(overrides?: CallOverrides): Promise<BigNumber>;

    LICENSE_NFT(overrides?: CallOverrides): Promise<BigNumber>;

    "LICENSE_NFT()"(overrides?: CallOverrides): Promise<BigNumber>;

    LICENSE_REGISTRY(overrides?: CallOverrides): Promise<BigNumber>;

    "LICENSE_REGISTRY()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROYALTY_MODULE(overrides?: CallOverrides): Promise<BigNumber>;

    "ROYALTY_MODULE()"(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    "UPGRADE_INTERFACE_VERSION()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    __ProtocolPausable_init(
      accessManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "__ProtocolPausable_init(address)"(
      accessManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    attachLicenseTerms(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "attachLicenseTerms(address,address,uint256)"(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    "authority()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      accessManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "initialize(address)"(
      accessManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isConsumingScheduledOp(overrides?: CallOverrides): Promise<BigNumber>;

    "isConsumingScheduledOp()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintLicenseTokens(
      licensorIpId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mintLicenseTokens(address,address,uint256,uint256,address,bytes)"(
      licensorIpId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "pause()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<BigNumber>;

    registerDerivative(
      childIpId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      licenseTemplate: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerDerivative(address,address[],uint256[],address,bytes)"(
      childIpId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      licenseTemplate: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerDerivativeWithLicenseTokens(
      childIpId: PromiseOrValue<string>,
      licenseTokenIds: PromiseOrValue<BigNumberish>[],
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerDerivativeWithLicenseTokens(address,uint256[],bytes)"(
      childIpId: PromiseOrValue<string>,
      licenseTokenIds: PromiseOrValue<BigNumberish>[],
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setAuthority(address)"(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "unpause()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ACCESS_CONTROLLER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ACCESS_CONTROLLER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DISPUTE_MODULE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DISPUTE_MODULE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IP_ACCOUNT_REGISTRY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "IP_ACCOUNT_REGISTRY()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LICENSE_NFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "LICENSE_NFT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LICENSE_REGISTRY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "LICENSE_REGISTRY()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROYALTY_MODULE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ROYALTY_MODULE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UPGRADE_INTERFACE_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "UPGRADE_INTERFACE_VERSION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __ProtocolPausable_init(
      accessManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "__ProtocolPausable_init(address)"(
      accessManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    attachLicenseTerms(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "attachLicenseTerms(address,address,uint256)"(
      ipId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "authority()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      accessManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      accessManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isConsumingScheduledOp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isConsumingScheduledOp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintLicenseTokens(
      licensorIpId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mintLicenseTokens(address,address,uint256,uint256,address,bytes)"(
      licensorIpId: PromiseOrValue<string>,
      licenseTemplate: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerDerivative(
      childIpId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      licenseTemplate: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerDerivative(address,address[],uint256[],address,bytes)"(
      childIpId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      licenseTemplate: PromiseOrValue<string>,
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerDerivativeWithLicenseTokens(
      childIpId: PromiseOrValue<string>,
      licenseTokenIds: PromiseOrValue<BigNumberish>[],
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerDerivativeWithLicenseTokens(address,uint256[],bytes)"(
      childIpId: PromiseOrValue<string>,
      licenseTokenIds: PromiseOrValue<BigNumberish>[],
      royaltyContext: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setAuthority(address)"(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
