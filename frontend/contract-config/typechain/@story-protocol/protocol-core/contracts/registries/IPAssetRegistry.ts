/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IPAssetRegistryInterface extends utils.Interface {
  functions: {
    "ERC6551_PUBLIC_REGISTRY()": FunctionFragment;
    "IP_ACCOUNT_IMPL()": FunctionFragment;
    "IP_ACCOUNT_SALT()": FunctionFragment;
    "UPGRADE_INTERFACE_VERSION()": FunctionFragment;
    "__ProtocolPausable_init(address)": FunctionFragment;
    "authority()": FunctionFragment;
    "getIPAccountImpl()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "ipAccount(uint256,address,uint256)": FunctionFragment;
    "ipId(uint256,address,uint256)": FunctionFragment;
    "isConsumingScheduledOp()": FunctionFragment;
    "isRegistered(address)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "register(uint256,address,uint256)": FunctionFragment;
    "registerIpAccount(uint256,address,uint256)": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "unpause()": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ERC6551_PUBLIC_REGISTRY"
      | "ERC6551_PUBLIC_REGISTRY()"
      | "IP_ACCOUNT_IMPL"
      | "IP_ACCOUNT_IMPL()"
      | "IP_ACCOUNT_SALT"
      | "IP_ACCOUNT_SALT()"
      | "UPGRADE_INTERFACE_VERSION"
      | "UPGRADE_INTERFACE_VERSION()"
      | "__ProtocolPausable_init"
      | "__ProtocolPausable_init(address)"
      | "authority"
      | "authority()"
      | "getIPAccountImpl"
      | "getIPAccountImpl()"
      | "initialize"
      | "initialize(address)"
      | "ipAccount"
      | "ipAccount(uint256,address,uint256)"
      | "ipId"
      | "ipId(uint256,address,uint256)"
      | "isConsumingScheduledOp"
      | "isConsumingScheduledOp()"
      | "isRegistered"
      | "isRegistered(address)"
      | "pause"
      | "pause()"
      | "paused"
      | "paused()"
      | "proxiableUUID"
      | "proxiableUUID()"
      | "register"
      | "register(uint256,address,uint256)"
      | "registerIpAccount"
      | "registerIpAccount(uint256,address,uint256)"
      | "setAuthority"
      | "setAuthority(address)"
      | "totalSupply"
      | "totalSupply()"
      | "unpause"
      | "unpause()"
      | "upgradeToAndCall"
      | "upgradeToAndCall(address,bytes)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ERC6551_PUBLIC_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERC6551_PUBLIC_REGISTRY()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IP_ACCOUNT_IMPL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IP_ACCOUNT_IMPL()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IP_ACCOUNT_SALT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IP_ACCOUNT_SALT()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__ProtocolPausable_init",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "__ProtocolPausable_init(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "authority()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIPAccountImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIPAccountImpl()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ipAccount",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ipAccount(uint256,address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ipId",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ipId(uint256,address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isConsumingScheduledOp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isConsumingScheduledOp()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause()", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "register(uint256,address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerIpAccount",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerIpAccount(uint256,address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthority(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall(address,bytes)",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "ERC6551_PUBLIC_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC6551_PUBLIC_REGISTRY()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IP_ACCOUNT_IMPL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IP_ACCOUNT_IMPL()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IP_ACCOUNT_SALT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IP_ACCOUNT_SALT()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__ProtocolPausable_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__ProtocolPausable_init(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authority()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIPAccountImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIPAccountImpl()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialize(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ipAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ipAccount(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ipId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ipId(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isConsumingScheduledOp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isConsumingScheduledOp()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "register(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerIpAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerIpAccount(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall(address,bytes)",
    data: BytesLike
  ): Result;

  events: {
    "AuthorityUpdated(address)": EventFragment;
    "IPAccountRegistered(address,address,uint256,address,uint256)": EventFragment;
    "IPRegistered(address,uint256,address,uint256,string,string,uint256)": EventFragment;
    "Initialized(uint64)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated(address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IPAccountRegistered"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "IPAccountRegistered(address,address,uint256,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IPRegistered"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "IPRegistered(address,uint256,address,uint256,string,string,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized(uint64)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused(address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused(address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded(address)"): EventFragment;
}

export interface AuthorityUpdatedEventObject {
  authority: string;
}
export type AuthorityUpdatedEvent = TypedEvent<
  [string],
  AuthorityUpdatedEventObject
>;

export type AuthorityUpdatedEventFilter =
  TypedEventFilter<AuthorityUpdatedEvent>;

export interface IPAccountRegisteredEventObject {
  account: string;
  implementation: string;
  chainId: BigNumber;
  tokenContract: string;
  tokenId: BigNumber;
}
export type IPAccountRegisteredEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  IPAccountRegisteredEventObject
>;

export type IPAccountRegisteredEventFilter =
  TypedEventFilter<IPAccountRegisteredEvent>;

export interface IPRegisteredEventObject {
  ipId: string;
  chainId: BigNumber;
  tokenContract: string;
  tokenId: BigNumber;
  name: string;
  uri: string;
  registrationDate: BigNumber;
}
export type IPRegisteredEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string, string, BigNumber],
  IPRegisteredEventObject
>;

export type IPRegisteredEventFilter = TypedEventFilter<IPRegisteredEvent>;

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface IPAssetRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPAssetRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ERC6551_PUBLIC_REGISTRY(overrides?: CallOverrides): Promise<[string]>;

    "ERC6551_PUBLIC_REGISTRY()"(overrides?: CallOverrides): Promise<[string]>;

    IP_ACCOUNT_IMPL(overrides?: CallOverrides): Promise<[string]>;

    "IP_ACCOUNT_IMPL()"(overrides?: CallOverrides): Promise<[string]>;

    IP_ACCOUNT_SALT(overrides?: CallOverrides): Promise<[string]>;

    "IP_ACCOUNT_SALT()"(overrides?: CallOverrides): Promise<[string]>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<[string]>;

    "UPGRADE_INTERFACE_VERSION()"(overrides?: CallOverrides): Promise<[string]>;

    __ProtocolPausable_init(
      accessManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "__ProtocolPausable_init(address)"(
      accessManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authority(overrides?: CallOverrides): Promise<[string]>;

    "authority()"(overrides?: CallOverrides): Promise<[string]>;

    getIPAccountImpl(overrides?: CallOverrides): Promise<[string]>;

    "getIPAccountImpl()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      accessManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      accessManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ipAccount(
      chainId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "ipAccount(uint256,address,uint256)"(
      chainId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ipId(
      chainId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "ipId(uint256,address,uint256)"(
      chainId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isConsumingScheduledOp(overrides?: CallOverrides): Promise<[string]>;

    "isConsumingScheduledOp()"(overrides?: CallOverrides): Promise<[string]>;

    isRegistered(
      id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isRegistered(address)"(
      id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<[string]>;

    register(
      chainid: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "register(uint256,address,uint256)"(
      chainid: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerIpAccount(
      chainId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerIpAccount(uint256,address,uint256)"(
      chainId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setAuthority(address)"(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ERC6551_PUBLIC_REGISTRY(overrides?: CallOverrides): Promise<string>;

  "ERC6551_PUBLIC_REGISTRY()"(overrides?: CallOverrides): Promise<string>;

  IP_ACCOUNT_IMPL(overrides?: CallOverrides): Promise<string>;

  "IP_ACCOUNT_IMPL()"(overrides?: CallOverrides): Promise<string>;

  IP_ACCOUNT_SALT(overrides?: CallOverrides): Promise<string>;

  "IP_ACCOUNT_SALT()"(overrides?: CallOverrides): Promise<string>;

  UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

  "UPGRADE_INTERFACE_VERSION()"(overrides?: CallOverrides): Promise<string>;

  __ProtocolPausable_init(
    accessManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "__ProtocolPausable_init(address)"(
    accessManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authority(overrides?: CallOverrides): Promise<string>;

  "authority()"(overrides?: CallOverrides): Promise<string>;

  getIPAccountImpl(overrides?: CallOverrides): Promise<string>;

  "getIPAccountImpl()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    accessManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    accessManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ipAccount(
    chainId: PromiseOrValue<BigNumberish>,
    tokenContract: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "ipAccount(uint256,address,uint256)"(
    chainId: PromiseOrValue<BigNumberish>,
    tokenContract: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  ipId(
    chainId: PromiseOrValue<BigNumberish>,
    tokenContract: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "ipId(uint256,address,uint256)"(
    chainId: PromiseOrValue<BigNumberish>,
    tokenContract: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  isConsumingScheduledOp(overrides?: CallOverrides): Promise<string>;

  "isConsumingScheduledOp()"(overrides?: CallOverrides): Promise<string>;

  isRegistered(
    id: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isRegistered(address)"(
    id: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "pause()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

  register(
    chainid: PromiseOrValue<BigNumberish>,
    tokenContract: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "register(uint256,address,uint256)"(
    chainid: PromiseOrValue<BigNumberish>,
    tokenContract: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerIpAccount(
    chainId: PromiseOrValue<BigNumberish>,
    tokenContract: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerIpAccount(uint256,address,uint256)"(
    chainId: PromiseOrValue<BigNumberish>,
    tokenContract: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAuthority(
    newAuthority: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setAuthority(address)"(
    newAuthority: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "unpause()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "upgradeToAndCall(address,bytes)"(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ERC6551_PUBLIC_REGISTRY(overrides?: CallOverrides): Promise<string>;

    "ERC6551_PUBLIC_REGISTRY()"(overrides?: CallOverrides): Promise<string>;

    IP_ACCOUNT_IMPL(overrides?: CallOverrides): Promise<string>;

    "IP_ACCOUNT_IMPL()"(overrides?: CallOverrides): Promise<string>;

    IP_ACCOUNT_SALT(overrides?: CallOverrides): Promise<string>;

    "IP_ACCOUNT_SALT()"(overrides?: CallOverrides): Promise<string>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

    "UPGRADE_INTERFACE_VERSION()"(overrides?: CallOverrides): Promise<string>;

    __ProtocolPausable_init(
      accessManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "__ProtocolPausable_init(address)"(
      accessManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    authority(overrides?: CallOverrides): Promise<string>;

    "authority()"(overrides?: CallOverrides): Promise<string>;

    getIPAccountImpl(overrides?: CallOverrides): Promise<string>;

    "getIPAccountImpl()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      accessManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address)"(
      accessManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    ipAccount(
      chainId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "ipAccount(uint256,address,uint256)"(
      chainId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    ipId(
      chainId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "ipId(uint256,address,uint256)"(
      chainId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    isConsumingScheduledOp(overrides?: CallOverrides): Promise<string>;

    "isConsumingScheduledOp()"(overrides?: CallOverrides): Promise<string>;

    isRegistered(
      id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isRegistered(address)"(
      id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

    register(
      chainid: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "register(uint256,address,uint256)"(
      chainid: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerIpAccount(
      chainId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "registerIpAccount(uint256,address,uint256)"(
      chainId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAuthority(address)"(
      newAuthority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AuthorityUpdated(address)"(authority?: null): AuthorityUpdatedEventFilter;
    AuthorityUpdated(authority?: null): AuthorityUpdatedEventFilter;

    "IPAccountRegistered(address,address,uint256,address,uint256)"(
      account?: PromiseOrValue<string> | null,
      implementation?: PromiseOrValue<string> | null,
      chainId?: PromiseOrValue<BigNumberish> | null,
      tokenContract?: null,
      tokenId?: null
    ): IPAccountRegisteredEventFilter;
    IPAccountRegistered(
      account?: PromiseOrValue<string> | null,
      implementation?: PromiseOrValue<string> | null,
      chainId?: PromiseOrValue<BigNumberish> | null,
      tokenContract?: null,
      tokenId?: null
    ): IPAccountRegisteredEventFilter;

    "IPRegistered(address,uint256,address,uint256,string,string,uint256)"(
      ipId?: null,
      chainId?: PromiseOrValue<BigNumberish> | null,
      tokenContract?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      name?: null,
      uri?: null,
      registrationDate?: null
    ): IPRegisteredEventFilter;
    IPRegistered(
      ipId?: null,
      chainId?: PromiseOrValue<BigNumberish> | null,
      tokenContract?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      name?: null,
      uri?: null,
      registrationDate?: null
    ): IPRegisteredEventFilter;

    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    ERC6551_PUBLIC_REGISTRY(overrides?: CallOverrides): Promise<BigNumber>;

    "ERC6551_PUBLIC_REGISTRY()"(overrides?: CallOverrides): Promise<BigNumber>;

    IP_ACCOUNT_IMPL(overrides?: CallOverrides): Promise<BigNumber>;

    "IP_ACCOUNT_IMPL()"(overrides?: CallOverrides): Promise<BigNumber>;

    IP_ACCOUNT_SALT(overrides?: CallOverrides): Promise<BigNumber>;

    "IP_ACCOUNT_SALT()"(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    "UPGRADE_INTERFACE_VERSION()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    __ProtocolPausable_init(
      accessManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "__ProtocolPausable_init(address)"(
      accessManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    "authority()"(overrides?: CallOverrides): Promise<BigNumber>;

    getIPAccountImpl(overrides?: CallOverrides): Promise<BigNumber>;

    "getIPAccountImpl()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      accessManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "initialize(address)"(
      accessManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ipAccount(
      chainId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ipAccount(uint256,address,uint256)"(
      chainId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ipId(
      chainId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ipId(uint256,address,uint256)"(
      chainId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isConsumingScheduledOp(overrides?: CallOverrides): Promise<BigNumber>;

    "isConsumingScheduledOp()"(overrides?: CallOverrides): Promise<BigNumber>;

    isRegistered(
      id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isRegistered(address)"(
      id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "pause()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<BigNumber>;

    register(
      chainid: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "register(uint256,address,uint256)"(
      chainid: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerIpAccount(
      chainId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerIpAccount(uint256,address,uint256)"(
      chainId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setAuthority(address)"(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "unpause()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ERC6551_PUBLIC_REGISTRY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ERC6551_PUBLIC_REGISTRY()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IP_ACCOUNT_IMPL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "IP_ACCOUNT_IMPL()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IP_ACCOUNT_SALT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "IP_ACCOUNT_SALT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UPGRADE_INTERFACE_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "UPGRADE_INTERFACE_VERSION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __ProtocolPausable_init(
      accessManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "__ProtocolPausable_init(address)"(
      accessManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "authority()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIPAccountImpl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getIPAccountImpl()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      accessManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      accessManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ipAccount(
      chainId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ipAccount(uint256,address,uint256)"(
      chainId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ipId(
      chainId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ipId(uint256,address,uint256)"(
      chainId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isConsumingScheduledOp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isConsumingScheduledOp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegistered(
      id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isRegistered(address)"(
      id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    register(
      chainid: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "register(uint256,address,uint256)"(
      chainid: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerIpAccount(
      chainId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerIpAccount(uint256,address,uint256)"(
      chainId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setAuthority(address)"(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
