/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IAccessManagerInterface extends utils.Interface {
  functions: {
    "canCall(address,address,bytes4)": FunctionFragment;
    "cancel(address,address,bytes)": FunctionFragment;
    "consumeScheduledOp(address,bytes)": FunctionFragment;
    "execute(address,bytes)": FunctionFragment;
    "expiration()": FunctionFragment;
    "getAccess(uint64,address)": FunctionFragment;
    "getNonce(bytes32)": FunctionFragment;
    "getRoleAdmin(uint64)": FunctionFragment;
    "getRoleGrantDelay(uint64)": FunctionFragment;
    "getRoleGuardian(uint64)": FunctionFragment;
    "getSchedule(bytes32)": FunctionFragment;
    "getTargetAdminDelay(address)": FunctionFragment;
    "getTargetFunctionRole(address,bytes4)": FunctionFragment;
    "grantRole(uint64,address,uint32)": FunctionFragment;
    "hasRole(uint64,address)": FunctionFragment;
    "hashOperation(address,address,bytes)": FunctionFragment;
    "isTargetClosed(address)": FunctionFragment;
    "labelRole(uint64,string)": FunctionFragment;
    "minSetback()": FunctionFragment;
    "renounceRole(uint64,address)": FunctionFragment;
    "revokeRole(uint64,address)": FunctionFragment;
    "schedule(address,bytes,uint48)": FunctionFragment;
    "setGrantDelay(uint64,uint32)": FunctionFragment;
    "setRoleAdmin(uint64,uint64)": FunctionFragment;
    "setRoleGuardian(uint64,uint64)": FunctionFragment;
    "setTargetAdminDelay(address,uint32)": FunctionFragment;
    "setTargetClosed(address,bool)": FunctionFragment;
    "setTargetFunctionRole(address,bytes4[],uint64)": FunctionFragment;
    "updateAuthority(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "canCall"
      | "canCall(address,address,bytes4)"
      | "cancel"
      | "cancel(address,address,bytes)"
      | "consumeScheduledOp"
      | "consumeScheduledOp(address,bytes)"
      | "execute"
      | "execute(address,bytes)"
      | "expiration"
      | "expiration()"
      | "getAccess"
      | "getAccess(uint64,address)"
      | "getNonce"
      | "getNonce(bytes32)"
      | "getRoleAdmin"
      | "getRoleAdmin(uint64)"
      | "getRoleGrantDelay"
      | "getRoleGrantDelay(uint64)"
      | "getRoleGuardian"
      | "getRoleGuardian(uint64)"
      | "getSchedule"
      | "getSchedule(bytes32)"
      | "getTargetAdminDelay"
      | "getTargetAdminDelay(address)"
      | "getTargetFunctionRole"
      | "getTargetFunctionRole(address,bytes4)"
      | "grantRole"
      | "grantRole(uint64,address,uint32)"
      | "hasRole"
      | "hasRole(uint64,address)"
      | "hashOperation"
      | "hashOperation(address,address,bytes)"
      | "isTargetClosed"
      | "isTargetClosed(address)"
      | "labelRole"
      | "labelRole(uint64,string)"
      | "minSetback"
      | "minSetback()"
      | "renounceRole"
      | "renounceRole(uint64,address)"
      | "revokeRole"
      | "revokeRole(uint64,address)"
      | "schedule"
      | "schedule(address,bytes,uint48)"
      | "setGrantDelay"
      | "setGrantDelay(uint64,uint32)"
      | "setRoleAdmin"
      | "setRoleAdmin(uint64,uint64)"
      | "setRoleGuardian"
      | "setRoleGuardian(uint64,uint64)"
      | "setTargetAdminDelay"
      | "setTargetAdminDelay(address,uint32)"
      | "setTargetClosed"
      | "setTargetClosed(address,bool)"
      | "setTargetFunctionRole"
      | "setTargetFunctionRole(address,bytes4[],uint64)"
      | "updateAuthority"
      | "updateAuthority(address,address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "canCall",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "canCall(address,address,bytes4)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel(address,address,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "consumeScheduledOp",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "consumeScheduledOp(address,bytes)",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "execute(address,bytes)",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "expiration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expiration()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccess",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccess(uint64,address)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin(uint64)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleGrantDelay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleGrantDelay(uint64)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleGuardian",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleGuardian(uint64)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSchedule",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSchedule(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetAdminDelay",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetAdminDelay(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetFunctionRole",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetFunctionRole(address,bytes4)",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole(uint64,address,uint32)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole(uint64,address)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hashOperation",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashOperation(address,address,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isTargetClosed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTargetClosed(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "labelRole",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "labelRole(uint64,string)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "minSetback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minSetback()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole(uint64,address)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole(uint64,address)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "schedule",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "schedule(address,bytes,uint48)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setGrantDelay",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGrantDelay(uint64,uint32)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleAdmin",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleAdmin(uint64,uint64)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleGuardian",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleGuardian(uint64,uint64)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTargetAdminDelay",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTargetAdminDelay(address,uint32)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTargetClosed",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTargetClosed(address,bool)",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTargetFunctionRole",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTargetFunctionRole(address,bytes4[],uint64)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAuthority",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAuthority(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "canCall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canCall(address,address,bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancel(address,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consumeScheduledOp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consumeScheduledOp(address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "execute(address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expiration", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "expiration()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAccess", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccess(uint64,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNonce(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin(uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleGrantDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleGrantDelay(uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleGuardian(uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSchedule(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetAdminDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetAdminDelay(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetFunctionRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetFunctionRole(address,bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantRole(uint64,address,uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasRole(uint64,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashOperation(address,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTargetClosed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTargetClosed(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "labelRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "labelRole(uint64,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minSetback", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minSetback()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole(uint64,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeRole(uint64,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "schedule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "schedule(address,bytes,uint48)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGrantDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGrantDelay(uint64,uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoleAdmin(uint64,uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoleGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoleGuardian(uint64,uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTargetAdminDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTargetAdminDelay(address,uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTargetClosed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTargetClosed(address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTargetFunctionRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTargetFunctionRole(address,bytes4[],uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAuthority(address,address)",
    data: BytesLike
  ): Result;

  events: {
    "OperationCanceled(bytes32,uint32)": EventFragment;
    "OperationExecuted(bytes32,uint32)": EventFragment;
    "OperationScheduled(bytes32,uint32,uint48,address,address,bytes)": EventFragment;
    "RoleAdminChanged(uint64,uint64)": EventFragment;
    "RoleGrantDelayChanged(uint64,uint32,uint48)": EventFragment;
    "RoleGranted(uint64,address,uint32,uint48,bool)": EventFragment;
    "RoleGuardianChanged(uint64,uint64)": EventFragment;
    "RoleLabel(uint64,string)": EventFragment;
    "RoleRevoked(uint64,address)": EventFragment;
    "TargetAdminDelayUpdated(address,uint32,uint48)": EventFragment;
    "TargetClosed(address,bool)": EventFragment;
    "TargetFunctionRoleUpdated(address,bytes4,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OperationCanceled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OperationCanceled(bytes32,uint32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperationExecuted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OperationExecuted(bytes32,uint32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperationScheduled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OperationScheduled(bytes32,uint32,uint48,address,address,bytes)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoleAdminChanged(uint64,uint64)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGrantDelayChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoleGrantDelayChanged(uint64,uint32,uint48)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoleGranted(uint64,address,uint32,uint48,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGuardianChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoleGuardianChanged(uint64,uint64)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleLabel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleLabel(uint64,string)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoleRevoked(uint64,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TargetAdminDelayUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TargetAdminDelayUpdated(address,uint32,uint48)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TargetClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TargetClosed(address,bool)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TargetFunctionRoleUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TargetFunctionRoleUpdated(address,bytes4,uint64)"
  ): EventFragment;
}

export interface OperationCanceledEventObject {
  operationId: string;
  nonce: number;
}
export type OperationCanceledEvent = TypedEvent<
  [string, number],
  OperationCanceledEventObject
>;

export type OperationCanceledEventFilter =
  TypedEventFilter<OperationCanceledEvent>;

export interface OperationExecutedEventObject {
  operationId: string;
  nonce: number;
}
export type OperationExecutedEvent = TypedEvent<
  [string, number],
  OperationExecutedEventObject
>;

export type OperationExecutedEventFilter =
  TypedEventFilter<OperationExecutedEvent>;

export interface OperationScheduledEventObject {
  operationId: string;
  nonce: number;
  schedule: number;
  caller: string;
  target: string;
  data: string;
}
export type OperationScheduledEvent = TypedEvent<
  [string, number, number, string, string, string],
  OperationScheduledEventObject
>;

export type OperationScheduledEventFilter =
  TypedEventFilter<OperationScheduledEvent>;

export interface RoleAdminChangedEventObject {
  roleId: BigNumber;
  admin: BigNumber;
}
export type RoleAdminChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantDelayChangedEventObject {
  roleId: BigNumber;
  delay: number;
  since: number;
}
export type RoleGrantDelayChangedEvent = TypedEvent<
  [BigNumber, number, number],
  RoleGrantDelayChangedEventObject
>;

export type RoleGrantDelayChangedEventFilter =
  TypedEventFilter<RoleGrantDelayChangedEvent>;

export interface RoleGrantedEventObject {
  roleId: BigNumber;
  account: string;
  delay: number;
  since: number;
  newMember: boolean;
}
export type RoleGrantedEvent = TypedEvent<
  [BigNumber, string, number, number, boolean],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleGuardianChangedEventObject {
  roleId: BigNumber;
  guardian: BigNumber;
}
export type RoleGuardianChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  RoleGuardianChangedEventObject
>;

export type RoleGuardianChangedEventFilter =
  TypedEventFilter<RoleGuardianChangedEvent>;

export interface RoleLabelEventObject {
  roleId: BigNumber;
  label: string;
}
export type RoleLabelEvent = TypedEvent<
  [BigNumber, string],
  RoleLabelEventObject
>;

export type RoleLabelEventFilter = TypedEventFilter<RoleLabelEvent>;

export interface RoleRevokedEventObject {
  roleId: BigNumber;
  account: string;
}
export type RoleRevokedEvent = TypedEvent<
  [BigNumber, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TargetAdminDelayUpdatedEventObject {
  target: string;
  delay: number;
  since: number;
}
export type TargetAdminDelayUpdatedEvent = TypedEvent<
  [string, number, number],
  TargetAdminDelayUpdatedEventObject
>;

export type TargetAdminDelayUpdatedEventFilter =
  TypedEventFilter<TargetAdminDelayUpdatedEvent>;

export interface TargetClosedEventObject {
  target: string;
  closed: boolean;
}
export type TargetClosedEvent = TypedEvent<
  [string, boolean],
  TargetClosedEventObject
>;

export type TargetClosedEventFilter = TypedEventFilter<TargetClosedEvent>;

export interface TargetFunctionRoleUpdatedEventObject {
  target: string;
  selector: string;
  roleId: BigNumber;
}
export type TargetFunctionRoleUpdatedEvent = TypedEvent<
  [string, string, BigNumber],
  TargetFunctionRoleUpdatedEventObject
>;

export type TargetFunctionRoleUpdatedEventFilter =
  TypedEventFilter<TargetFunctionRoleUpdatedEvent>;

export interface IAccessManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAccessManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canCall(
      caller: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, number] & { allowed: boolean; delay: number }>;

    "canCall(address,address,bytes4)"(
      caller: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, number] & { allowed: boolean; delay: number }>;

    cancel(
      caller: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "cancel(address,address,bytes)"(
      caller: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    consumeScheduledOp(
      caller: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "consumeScheduledOp(address,bytes)"(
      caller: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    execute(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "execute(address,bytes)"(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    expiration(overrides?: CallOverrides): Promise<[number]>;

    "expiration()"(overrides?: CallOverrides): Promise<[number]>;

    getAccess(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, number, number, number]>;

    "getAccess(uint64,address)"(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, number, number, number]>;

    getNonce(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "getNonce(bytes32)"(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getRoleAdmin(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRoleAdmin(uint64)"(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoleGrantDelay(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "getRoleGrantDelay(uint64)"(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getRoleGuardian(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRoleGuardian(uint64)"(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSchedule(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "getSchedule(bytes32)"(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getTargetAdminDelay(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "getTargetAdminDelay(address)"(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getTargetFunctionRole(
      target: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTargetFunctionRole(address,bytes4)"(
      target: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      executionDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "grantRole(uint64,address,uint32)"(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      executionDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, number]>;

    "hasRole(uint64,address)"(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, number]>;

    hashOperation(
      caller: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "hashOperation(address,address,bytes)"(
      caller: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isTargetClosed(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isTargetClosed(address)"(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    labelRole(
      roleId: PromiseOrValue<BigNumberish>,
      label: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "labelRole(uint64,string)"(
      roleId: PromiseOrValue<BigNumberish>,
      label: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    minSetback(overrides?: CallOverrides): Promise<[number]>;

    "minSetback()"(overrides?: CallOverrides): Promise<[number]>;

    renounceRole(
      roleId: PromiseOrValue<BigNumberish>,
      callerConfirmation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "renounceRole(uint64,address)"(
      roleId: PromiseOrValue<BigNumberish>,
      callerConfirmation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "revokeRole(uint64,address)"(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    schedule(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      when: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "schedule(address,bytes,uint48)"(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      when: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGrantDelay(
      roleId: PromiseOrValue<BigNumberish>,
      newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setGrantDelay(uint64,uint32)"(
      roleId: PromiseOrValue<BigNumberish>,
      newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRoleAdmin(
      roleId: PromiseOrValue<BigNumberish>,
      admin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setRoleAdmin(uint64,uint64)"(
      roleId: PromiseOrValue<BigNumberish>,
      admin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRoleGuardian(
      roleId: PromiseOrValue<BigNumberish>,
      guardian: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setRoleGuardian(uint64,uint64)"(
      roleId: PromiseOrValue<BigNumberish>,
      guardian: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTargetAdminDelay(
      target: PromiseOrValue<string>,
      newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setTargetAdminDelay(address,uint32)"(
      target: PromiseOrValue<string>,
      newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTargetClosed(
      target: PromiseOrValue<string>,
      closed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setTargetClosed(address,bool)"(
      target: PromiseOrValue<string>,
      closed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTargetFunctionRole(
      target: PromiseOrValue<string>,
      selectors: PromiseOrValue<BytesLike>[],
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setTargetFunctionRole(address,bytes4[],uint64)"(
      target: PromiseOrValue<string>,
      selectors: PromiseOrValue<BytesLike>[],
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAuthority(
      target: PromiseOrValue<string>,
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateAuthority(address,address)"(
      target: PromiseOrValue<string>,
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  canCall(
    caller: PromiseOrValue<string>,
    target: PromiseOrValue<string>,
    selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[boolean, number] & { allowed: boolean; delay: number }>;

  "canCall(address,address,bytes4)"(
    caller: PromiseOrValue<string>,
    target: PromiseOrValue<string>,
    selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[boolean, number] & { allowed: boolean; delay: number }>;

  cancel(
    caller: PromiseOrValue<string>,
    target: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "cancel(address,address,bytes)"(
    caller: PromiseOrValue<string>,
    target: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  consumeScheduledOp(
    caller: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "consumeScheduledOp(address,bytes)"(
    caller: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  execute(
    target: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "execute(address,bytes)"(
    target: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  expiration(overrides?: CallOverrides): Promise<number>;

  "expiration()"(overrides?: CallOverrides): Promise<number>;

  getAccess(
    roleId: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[number, number, number, number]>;

  "getAccess(uint64,address)"(
    roleId: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[number, number, number, number]>;

  getNonce(
    id: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  "getNonce(bytes32)"(
    id: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  getRoleAdmin(
    roleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRoleAdmin(uint64)"(
    roleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleGrantDelay(
    roleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  "getRoleGrantDelay(uint64)"(
    roleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getRoleGuardian(
    roleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRoleGuardian(uint64)"(
    roleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSchedule(
    id: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  "getSchedule(bytes32)"(
    id: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  getTargetAdminDelay(
    target: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  "getTargetAdminDelay(address)"(
    target: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getTargetFunctionRole(
    target: PromiseOrValue<string>,
    selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTargetFunctionRole(address,bytes4)"(
    target: PromiseOrValue<string>,
    selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    roleId: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    executionDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "grantRole(uint64,address,uint32)"(
    roleId: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    executionDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    roleId: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[boolean, number]>;

  "hasRole(uint64,address)"(
    roleId: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[boolean, number]>;

  hashOperation(
    caller: PromiseOrValue<string>,
    target: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "hashOperation(address,address,bytes)"(
    caller: PromiseOrValue<string>,
    target: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  isTargetClosed(
    target: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isTargetClosed(address)"(
    target: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  labelRole(
    roleId: PromiseOrValue<BigNumberish>,
    label: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "labelRole(uint64,string)"(
    roleId: PromiseOrValue<BigNumberish>,
    label: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  minSetback(overrides?: CallOverrides): Promise<number>;

  "minSetback()"(overrides?: CallOverrides): Promise<number>;

  renounceRole(
    roleId: PromiseOrValue<BigNumberish>,
    callerConfirmation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "renounceRole(uint64,address)"(
    roleId: PromiseOrValue<BigNumberish>,
    callerConfirmation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    roleId: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "revokeRole(uint64,address)"(
    roleId: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  schedule(
    target: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    when: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "schedule(address,bytes,uint48)"(
    target: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    when: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGrantDelay(
    roleId: PromiseOrValue<BigNumberish>,
    newDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setGrantDelay(uint64,uint32)"(
    roleId: PromiseOrValue<BigNumberish>,
    newDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRoleAdmin(
    roleId: PromiseOrValue<BigNumberish>,
    admin: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setRoleAdmin(uint64,uint64)"(
    roleId: PromiseOrValue<BigNumberish>,
    admin: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRoleGuardian(
    roleId: PromiseOrValue<BigNumberish>,
    guardian: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setRoleGuardian(uint64,uint64)"(
    roleId: PromiseOrValue<BigNumberish>,
    guardian: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTargetAdminDelay(
    target: PromiseOrValue<string>,
    newDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setTargetAdminDelay(address,uint32)"(
    target: PromiseOrValue<string>,
    newDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTargetClosed(
    target: PromiseOrValue<string>,
    closed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setTargetClosed(address,bool)"(
    target: PromiseOrValue<string>,
    closed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTargetFunctionRole(
    target: PromiseOrValue<string>,
    selectors: PromiseOrValue<BytesLike>[],
    roleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setTargetFunctionRole(address,bytes4[],uint64)"(
    target: PromiseOrValue<string>,
    selectors: PromiseOrValue<BytesLike>[],
    roleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAuthority(
    target: PromiseOrValue<string>,
    newAuthority: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateAuthority(address,address)"(
    target: PromiseOrValue<string>,
    newAuthority: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    canCall(
      caller: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, number] & { allowed: boolean; delay: number }>;

    "canCall(address,address,bytes4)"(
      caller: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, number] & { allowed: boolean; delay: number }>;

    cancel(
      caller: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    "cancel(address,address,bytes)"(
      caller: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    consumeScheduledOp(
      caller: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "consumeScheduledOp(address,bytes)"(
      caller: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    execute(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    "execute(address,bytes)"(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    expiration(overrides?: CallOverrides): Promise<number>;

    "expiration()"(overrides?: CallOverrides): Promise<number>;

    getAccess(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, number, number, number]>;

    "getAccess(uint64,address)"(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, number, number, number]>;

    getNonce(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    "getNonce(bytes32)"(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    getRoleAdmin(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(uint64)"(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleGrantDelay(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    "getRoleGrantDelay(uint64)"(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getRoleGuardian(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleGuardian(uint64)"(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSchedule(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    "getSchedule(bytes32)"(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    getTargetAdminDelay(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    "getTargetAdminDelay(address)"(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getTargetFunctionRole(
      target: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTargetFunctionRole(address,bytes4)"(
      target: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      executionDelay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(uint64,address,uint32)"(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      executionDelay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, number]>;

    "hasRole(uint64,address)"(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, number]>;

    hashOperation(
      caller: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "hashOperation(address,address,bytes)"(
      caller: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    isTargetClosed(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isTargetClosed(address)"(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    labelRole(
      roleId: PromiseOrValue<BigNumberish>,
      label: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "labelRole(uint64,string)"(
      roleId: PromiseOrValue<BigNumberish>,
      label: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    minSetback(overrides?: CallOverrides): Promise<number>;

    "minSetback()"(overrides?: CallOverrides): Promise<number>;

    renounceRole(
      roleId: PromiseOrValue<BigNumberish>,
      callerConfirmation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(uint64,address)"(
      roleId: PromiseOrValue<BigNumberish>,
      callerConfirmation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(uint64,address)"(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    schedule(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      when: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, number]>;

    "schedule(address,bytes,uint48)"(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      when: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, number]>;

    setGrantDelay(
      roleId: PromiseOrValue<BigNumberish>,
      newDelay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGrantDelay(uint64,uint32)"(
      roleId: PromiseOrValue<BigNumberish>,
      newDelay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoleAdmin(
      roleId: PromiseOrValue<BigNumberish>,
      admin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRoleAdmin(uint64,uint64)"(
      roleId: PromiseOrValue<BigNumberish>,
      admin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoleGuardian(
      roleId: PromiseOrValue<BigNumberish>,
      guardian: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRoleGuardian(uint64,uint64)"(
      roleId: PromiseOrValue<BigNumberish>,
      guardian: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTargetAdminDelay(
      target: PromiseOrValue<string>,
      newDelay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTargetAdminDelay(address,uint32)"(
      target: PromiseOrValue<string>,
      newDelay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTargetClosed(
      target: PromiseOrValue<string>,
      closed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTargetClosed(address,bool)"(
      target: PromiseOrValue<string>,
      closed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTargetFunctionRole(
      target: PromiseOrValue<string>,
      selectors: PromiseOrValue<BytesLike>[],
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTargetFunctionRole(address,bytes4[],uint64)"(
      target: PromiseOrValue<string>,
      selectors: PromiseOrValue<BytesLike>[],
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAuthority(
      target: PromiseOrValue<string>,
      newAuthority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateAuthority(address,address)"(
      target: PromiseOrValue<string>,
      newAuthority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OperationCanceled(bytes32,uint32)"(
      operationId?: PromiseOrValue<BytesLike> | null,
      nonce?: PromiseOrValue<BigNumberish> | null
    ): OperationCanceledEventFilter;
    OperationCanceled(
      operationId?: PromiseOrValue<BytesLike> | null,
      nonce?: PromiseOrValue<BigNumberish> | null
    ): OperationCanceledEventFilter;

    "OperationExecuted(bytes32,uint32)"(
      operationId?: PromiseOrValue<BytesLike> | null,
      nonce?: PromiseOrValue<BigNumberish> | null
    ): OperationExecutedEventFilter;
    OperationExecuted(
      operationId?: PromiseOrValue<BytesLike> | null,
      nonce?: PromiseOrValue<BigNumberish> | null
    ): OperationExecutedEventFilter;

    "OperationScheduled(bytes32,uint32,uint48,address,address,bytes)"(
      operationId?: PromiseOrValue<BytesLike> | null,
      nonce?: PromiseOrValue<BigNumberish> | null,
      schedule?: null,
      caller?: null,
      target?: null,
      data?: null
    ): OperationScheduledEventFilter;
    OperationScheduled(
      operationId?: PromiseOrValue<BytesLike> | null,
      nonce?: PromiseOrValue<BigNumberish> | null,
      schedule?: null,
      caller?: null,
      target?: null,
      data?: null
    ): OperationScheduledEventFilter;

    "RoleAdminChanged(uint64,uint64)"(
      roleId?: PromiseOrValue<BigNumberish> | null,
      admin?: PromiseOrValue<BigNumberish> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      roleId?: PromiseOrValue<BigNumberish> | null,
      admin?: PromiseOrValue<BigNumberish> | null
    ): RoleAdminChangedEventFilter;

    "RoleGrantDelayChanged(uint64,uint32,uint48)"(
      roleId?: PromiseOrValue<BigNumberish> | null,
      delay?: null,
      since?: null
    ): RoleGrantDelayChangedEventFilter;
    RoleGrantDelayChanged(
      roleId?: PromiseOrValue<BigNumberish> | null,
      delay?: null,
      since?: null
    ): RoleGrantDelayChangedEventFilter;

    "RoleGranted(uint64,address,uint32,uint48,bool)"(
      roleId?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      delay?: null,
      since?: null,
      newMember?: null
    ): RoleGrantedEventFilter;
    RoleGranted(
      roleId?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      delay?: null,
      since?: null,
      newMember?: null
    ): RoleGrantedEventFilter;

    "RoleGuardianChanged(uint64,uint64)"(
      roleId?: PromiseOrValue<BigNumberish> | null,
      guardian?: PromiseOrValue<BigNumberish> | null
    ): RoleGuardianChangedEventFilter;
    RoleGuardianChanged(
      roleId?: PromiseOrValue<BigNumberish> | null,
      guardian?: PromiseOrValue<BigNumberish> | null
    ): RoleGuardianChangedEventFilter;

    "RoleLabel(uint64,string)"(
      roleId?: PromiseOrValue<BigNumberish> | null,
      label?: null
    ): RoleLabelEventFilter;
    RoleLabel(
      roleId?: PromiseOrValue<BigNumberish> | null,
      label?: null
    ): RoleLabelEventFilter;

    "RoleRevoked(uint64,address)"(
      roleId?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      roleId?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "TargetAdminDelayUpdated(address,uint32,uint48)"(
      target?: PromiseOrValue<string> | null,
      delay?: null,
      since?: null
    ): TargetAdminDelayUpdatedEventFilter;
    TargetAdminDelayUpdated(
      target?: PromiseOrValue<string> | null,
      delay?: null,
      since?: null
    ): TargetAdminDelayUpdatedEventFilter;

    "TargetClosed(address,bool)"(
      target?: PromiseOrValue<string> | null,
      closed?: null
    ): TargetClosedEventFilter;
    TargetClosed(
      target?: PromiseOrValue<string> | null,
      closed?: null
    ): TargetClosedEventFilter;

    "TargetFunctionRoleUpdated(address,bytes4,uint64)"(
      target?: PromiseOrValue<string> | null,
      selector?: null,
      roleId?: PromiseOrValue<BigNumberish> | null
    ): TargetFunctionRoleUpdatedEventFilter;
    TargetFunctionRoleUpdated(
      target?: PromiseOrValue<string> | null,
      selector?: null,
      roleId?: PromiseOrValue<BigNumberish> | null
    ): TargetFunctionRoleUpdatedEventFilter;
  };

  estimateGas: {
    canCall(
      caller: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canCall(address,address,bytes4)"(
      caller: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancel(
      caller: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "cancel(address,address,bytes)"(
      caller: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    consumeScheduledOp(
      caller: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "consumeScheduledOp(address,bytes)"(
      caller: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    execute(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "execute(address,bytes)"(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    expiration(overrides?: CallOverrides): Promise<BigNumber>;

    "expiration()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAccess(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAccess(uint64,address)"(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNonce(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNonce(bytes32)"(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(uint64)"(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleGrantDelay(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleGrantDelay(uint64)"(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleGuardian(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleGuardian(uint64)"(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSchedule(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSchedule(bytes32)"(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTargetAdminDelay(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTargetAdminDelay(address)"(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTargetFunctionRole(
      target: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTargetFunctionRole(address,bytes4)"(
      target: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      executionDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "grantRole(uint64,address,uint32)"(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      executionDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(uint64,address)"(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashOperation(
      caller: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hashOperation(address,address,bytes)"(
      caller: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTargetClosed(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isTargetClosed(address)"(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    labelRole(
      roleId: PromiseOrValue<BigNumberish>,
      label: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "labelRole(uint64,string)"(
      roleId: PromiseOrValue<BigNumberish>,
      label: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    minSetback(overrides?: CallOverrides): Promise<BigNumber>;

    "minSetback()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      roleId: PromiseOrValue<BigNumberish>,
      callerConfirmation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "renounceRole(uint64,address)"(
      roleId: PromiseOrValue<BigNumberish>,
      callerConfirmation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "revokeRole(uint64,address)"(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    schedule(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      when: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "schedule(address,bytes,uint48)"(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      when: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGrantDelay(
      roleId: PromiseOrValue<BigNumberish>,
      newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setGrantDelay(uint64,uint32)"(
      roleId: PromiseOrValue<BigNumberish>,
      newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRoleAdmin(
      roleId: PromiseOrValue<BigNumberish>,
      admin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setRoleAdmin(uint64,uint64)"(
      roleId: PromiseOrValue<BigNumberish>,
      admin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRoleGuardian(
      roleId: PromiseOrValue<BigNumberish>,
      guardian: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setRoleGuardian(uint64,uint64)"(
      roleId: PromiseOrValue<BigNumberish>,
      guardian: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTargetAdminDelay(
      target: PromiseOrValue<string>,
      newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setTargetAdminDelay(address,uint32)"(
      target: PromiseOrValue<string>,
      newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTargetClosed(
      target: PromiseOrValue<string>,
      closed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setTargetClosed(address,bool)"(
      target: PromiseOrValue<string>,
      closed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTargetFunctionRole(
      target: PromiseOrValue<string>,
      selectors: PromiseOrValue<BytesLike>[],
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setTargetFunctionRole(address,bytes4[],uint64)"(
      target: PromiseOrValue<string>,
      selectors: PromiseOrValue<BytesLike>[],
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAuthority(
      target: PromiseOrValue<string>,
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateAuthority(address,address)"(
      target: PromiseOrValue<string>,
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canCall(
      caller: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canCall(address,address,bytes4)"(
      caller: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancel(
      caller: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "cancel(address,address,bytes)"(
      caller: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    consumeScheduledOp(
      caller: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "consumeScheduledOp(address,bytes)"(
      caller: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "execute(address,bytes)"(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    expiration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "expiration()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccess(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccess(uint64,address)"(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNonce(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNonce(bytes32)"(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(uint64)"(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleGrantDelay(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleGrantDelay(uint64)"(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleGuardian(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleGuardian(uint64)"(
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSchedule(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSchedule(bytes32)"(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTargetAdminDelay(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTargetAdminDelay(address)"(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTargetFunctionRole(
      target: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTargetFunctionRole(address,bytes4)"(
      target: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      executionDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "grantRole(uint64,address,uint32)"(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      executionDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(uint64,address)"(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashOperation(
      caller: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hashOperation(address,address,bytes)"(
      caller: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTargetClosed(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isTargetClosed(address)"(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    labelRole(
      roleId: PromiseOrValue<BigNumberish>,
      label: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "labelRole(uint64,string)"(
      roleId: PromiseOrValue<BigNumberish>,
      label: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    minSetback(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minSetback()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      roleId: PromiseOrValue<BigNumberish>,
      callerConfirmation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "renounceRole(uint64,address)"(
      roleId: PromiseOrValue<BigNumberish>,
      callerConfirmation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "revokeRole(uint64,address)"(
      roleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    schedule(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      when: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "schedule(address,bytes,uint48)"(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      when: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGrantDelay(
      roleId: PromiseOrValue<BigNumberish>,
      newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setGrantDelay(uint64,uint32)"(
      roleId: PromiseOrValue<BigNumberish>,
      newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRoleAdmin(
      roleId: PromiseOrValue<BigNumberish>,
      admin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setRoleAdmin(uint64,uint64)"(
      roleId: PromiseOrValue<BigNumberish>,
      admin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRoleGuardian(
      roleId: PromiseOrValue<BigNumberish>,
      guardian: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setRoleGuardian(uint64,uint64)"(
      roleId: PromiseOrValue<BigNumberish>,
      guardian: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTargetAdminDelay(
      target: PromiseOrValue<string>,
      newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setTargetAdminDelay(address,uint32)"(
      target: PromiseOrValue<string>,
      newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTargetClosed(
      target: PromiseOrValue<string>,
      closed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setTargetClosed(address,bool)"(
      target: PromiseOrValue<string>,
      closed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTargetFunctionRole(
      target: PromiseOrValue<string>,
      selectors: PromiseOrValue<BytesLike>[],
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setTargetFunctionRole(address,bytes4[],uint64)"(
      target: PromiseOrValue<string>,
      selectors: PromiseOrValue<BytesLike>[],
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAuthority(
      target: PromiseOrValue<string>,
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateAuthority(address,address)"(
      target: PromiseOrValue<string>,
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
