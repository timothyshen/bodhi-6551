/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  AccountERC6551,
  AccountERC6551Interface,
} from "../../../contracts/account/AccountERC6551";

const _abi = [
  {
    inputs: [],
    name: "NotAuthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "OwnershipCycle",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "TransactionExecuted",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "executeCall",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "isValidSignature",
    outputs: [
      {
        internalType: "bytes4",
        name: "magicValue",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC1155Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "tokenContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061118b806100206000396000f3fe6080604052600436106100595760003560e01c806301ffc9a7146100625780631626ba7e1461009f5780638da5cb5b146100dc5780639e5d4c4914610107578063f23a6e6114610137578063fc0c546a1461017457610060565b3661006057005b005b34801561006e57600080fd5b50610089600480360381019061008491906108ea565b6101a1565b6040516100969190610932565b60405180910390f35b3480156100ab57600080fd5b506100c660048036038101906100c19190610ac9565b6102f2565b6040516100d39190610b34565b60405180910390f35b3480156100e857600080fd5b506100f161032b565b6040516100fe9190610b90565b60405180910390f35b610121600480360381019061011c9190610c6d565b6103d5565b60405161012e9190610d60565b60405180910390f35b34801561014357600080fd5b5061015e60048036038101906101599190610d82565b61043e565b60405161016b9190610b34565b60405180910390f35b34801561018057600080fd5b50610189610453565b60405161019893929190610e28565b60405180910390f35b6000807f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061026d57507f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806102d557507feff4d378000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b905080156102e75760019150506102ed565b60009150505b919050565b6000806102fd61032b565b905061030a81858561046b565b1561031f57631626ba7e60e01b915050610325565b60009150505b92915050565b6000806000806103396104fa565b92509250925046831461035257600093505050506103d2565b8173ffffffffffffffffffffffffffffffffffffffff16636352211e826040518263ffffffff1660e01b815260040161038b9190610e5f565b602060405180830381865afa1580156103a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cc9190610e8f565b93505050505b90565b6060838573ffffffffffffffffffffffffffffffffffffffff167f47d99ad340f52da66535aff7e10da1ceb85a32bcbd9fa1c42314d194545e14d28585604051610420929190610ee9565b60405180910390a36104348585858561057a565b9050949350505050565b600063f23a6e6160e01b905095945050505050565b60008060006104606104fa565b925092509250909192565b600080600061047a8585610607565b915091506000600481111561049257610491610f0d565b5b8160048111156104a5576104a4610f0d565b5b1480156104dd57508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b806104ef57506104ee868686610658565b5b925050509392505050565b600080600080606067ffffffffffffffff81111561051b5761051a61099e565b5b6040519080825280601f01601f19166020018201604052801561054d5781602001600182028036833780820191505090505b50905060ad604d60208301303c8080602001905181019061056e9190610f8f565b93509350935050909192565b606060008573ffffffffffffffffffffffffffffffffffffffff168585856040516105a6929190611012565b60006040518083038185875af1925050503d80600081146105e3576040519150601f19603f3d011682016040523d82523d6000602084013e6105e8565b606091505b508093508192505050806105fe57815160208301fd5b50949350505050565b60008060418351036106485760008060006020860151925060408601519150606086015160001a905061063c8782858561079c565b94509450505050610651565b60006002915091505b9250929050565b60008060008573ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b868660405160240161068f92919061103a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516106f9919061109b565b600060405180830381855afa9150503d8060008114610734576040519150601f19603f3d011682016040523d82523d6000602084013e610739565b606091505b509150915081801561074d57506020815110155b80156107915750631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168180602001905181019061078f91906110c7565b145b925050509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156107d7576000600391509150610875565b6000600187878787604051600081526020016040526040516107fc9493929190611110565b6020604051602081039080840390855afa15801561081e573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361086c57600060019250925050610875565b80600092509250505b94509492505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6108c781610892565b81146108d257600080fd5b50565b6000813590506108e4816108be565b92915050565b600060208284031215610900576108ff610888565b5b600061090e848285016108d5565b91505092915050565b60008115159050919050565b61092c81610917565b82525050565b60006020820190506109476000830184610923565b92915050565b6000819050919050565b6109608161094d565b811461096b57600080fd5b50565b60008135905061097d81610957565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6109d68261098d565b810181811067ffffffffffffffff821117156109f5576109f461099e565b5b80604052505050565b6000610a0861087e565b9050610a1482826109cd565b919050565b600067ffffffffffffffff821115610a3457610a3361099e565b5b610a3d8261098d565b9050602081019050919050565b82818337600083830152505050565b6000610a6c610a6784610a19565b6109fe565b905082815260208101848484011115610a8857610a87610988565b5b610a93848285610a4a565b509392505050565b600082601f830112610ab057610aaf610983565b5b8135610ac0848260208601610a59565b91505092915050565b60008060408385031215610ae057610adf610888565b5b6000610aee8582860161096e565b925050602083013567ffffffffffffffff811115610b0f57610b0e61088d565b5b610b1b85828601610a9b565b9150509250929050565b610b2e81610892565b82525050565b6000602082019050610b496000830184610b25565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b7a82610b4f565b9050919050565b610b8a81610b6f565b82525050565b6000602082019050610ba56000830184610b81565b92915050565b610bb481610b6f565b8114610bbf57600080fd5b50565b600081359050610bd181610bab565b92915050565b6000819050919050565b610bea81610bd7565b8114610bf557600080fd5b50565b600081359050610c0781610be1565b92915050565b600080fd5b600080fd5b60008083601f840112610c2d57610c2c610983565b5b8235905067ffffffffffffffff811115610c4a57610c49610c0d565b5b602083019150836001820283011115610c6657610c65610c12565b5b9250929050565b60008060008060608587031215610c8757610c86610888565b5b6000610c9587828801610bc2565b9450506020610ca687828801610bf8565b935050604085013567ffffffffffffffff811115610cc757610cc661088d565b5b610cd387828801610c17565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d1b578082015181840152602081019050610d00565b60008484015250505050565b6000610d3282610ce1565b610d3c8185610cec565b9350610d4c818560208601610cfd565b610d558161098d565b840191505092915050565b60006020820190508181036000830152610d7a8184610d27565b905092915050565b600080600080600060a08688031215610d9e57610d9d610888565b5b6000610dac88828901610bc2565b9550506020610dbd88828901610bc2565b9450506040610dce88828901610bf8565b9350506060610ddf88828901610bf8565b925050608086013567ffffffffffffffff811115610e0057610dff61088d565b5b610e0c88828901610a9b565b9150509295509295909350565b610e2281610bd7565b82525050565b6000606082019050610e3d6000830186610e19565b610e4a6020830185610b81565b610e576040830184610e19565b949350505050565b6000602082019050610e746000830184610e19565b92915050565b600081519050610e8981610bab565b92915050565b600060208284031215610ea557610ea4610888565b5b6000610eb384828501610e7a565b91505092915050565b6000610ec88385610cec565b9350610ed5838584610a4a565b610ede8361098d565b840190509392505050565b60006020820190508181036000830152610f04818486610ebc565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600081519050610f4b81610be1565b92915050565b6000610f5c82610b4f565b9050919050565b610f6c81610f51565b8114610f7757600080fd5b50565b600081519050610f8981610f63565b92915050565b600080600060608486031215610fa857610fa7610888565b5b6000610fb686828701610f3c565b9350506020610fc786828701610f7a565b9250506040610fd886828701610f3c565b9150509250925092565b600081905092915050565b6000610ff98385610fe2565b9350611006838584610a4a565b82840190509392505050565b600061101f828486610fed565b91508190509392505050565b6110348161094d565b82525050565b600060408201905061104f600083018561102b565b81810360208301526110618184610d27565b90509392505050565b600061107582610ce1565b61107f8185610fe2565b935061108f818560208601610cfd565b80840191505092915050565b60006110a7828461106a565b915081905092915050565b6000815190506110c181610957565b92915050565b6000602082840312156110dd576110dc610888565b5b60006110eb848285016110b2565b91505092915050565b600060ff82169050919050565b61110a816110f4565b82525050565b6000608082019050611125600083018761102b565b6111326020830186611101565b61113f604083018561102b565b61114c606083018461102b565b9594505050505056fea26469706673582212209649e3ed956a9c0a656a40bae8417855ac0136c32546d947f88fc0a73016cd1d64736f6c63430008120033";

type AccountERC6551ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AccountERC6551ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AccountERC6551__factory extends ContractFactory {
  constructor(...args: AccountERC6551ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AccountERC6551> {
    return super.deploy(overrides || {}) as Promise<AccountERC6551>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AccountERC6551 {
    return super.attach(address) as AccountERC6551;
  }
  override connect(signer: Signer): AccountERC6551__factory {
    return super.connect(signer) as AccountERC6551__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AccountERC6551Interface {
    return new utils.Interface(_abi) as AccountERC6551Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AccountERC6551 {
    return new Contract(address, _abi, signerOrProvider) as AccountERC6551;
  }
}
