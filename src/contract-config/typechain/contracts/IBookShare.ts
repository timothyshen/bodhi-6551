/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface IBookShareInterface extends utils.Interface {
  functions: {
    "checkUserShareIsLagerThanOne(uint256)": FunctionFragment;
    "create(string,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkUserShareIsLagerThanOne"
      | "checkUserShareIsLagerThanOne(uint256)"
      | "create"
      | "create(string,string)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkUserShareIsLagerThanOne",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkUserShareIsLagerThanOne(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "create(string,string)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkUserShareIsLagerThanOne",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUserShareIsLagerThanOne(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "create(string,string)",
    data: BytesLike
  ): Result;

  events: {
    "Create(uint256,address,string)": EventFragment;
    "Remove(uint256,address)": EventFragment;
    "Trade(uint8,uint256,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Create"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Create(uint256,address,string)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Remove"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Remove(uint256,address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Trade"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Trade(uint8,uint256,address,uint256,uint256,uint256)"
  ): EventFragment;
}

export interface CreateEventObject {
  assetId: BigNumber;
  sender: string;
  arTxId: string;
}
export type CreateEvent = TypedEvent<
  [BigNumber, string, string],
  CreateEventObject
>;

export type CreateEventFilter = TypedEventFilter<CreateEvent>;

export interface RemoveEventObject {
  assetId: BigNumber;
  sender: string;
}
export type RemoveEvent = TypedEvent<[BigNumber, string], RemoveEventObject>;

export type RemoveEventFilter = TypedEventFilter<RemoveEvent>;

export interface TradeEventObject {
  tradeType: number;
  assetId: BigNumber;
  sender: string;
  tokenAmount: BigNumber;
  ethAmount: BigNumber;
  creatorFee: BigNumber;
}
export type TradeEvent = TypedEvent<
  [number, BigNumber, string, BigNumber, BigNumber, BigNumber],
  TradeEventObject
>;

export type TradeEventFilter = TypedEventFilter<TradeEvent>;

export interface IBookShare extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBookShareInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkUserShareIsLagerThanOne(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "checkUserShareIsLagerThanOne(uint256)"(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    create(
      _title: PromiseOrValue<string>,
      arTxId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "create(string,string)"(
      _title: PromiseOrValue<string>,
      arTxId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  checkUserShareIsLagerThanOne(
    assetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "checkUserShareIsLagerThanOne(uint256)"(
    assetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  create(
    _title: PromiseOrValue<string>,
    arTxId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "create(string,string)"(
    _title: PromiseOrValue<string>,
    arTxId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    checkUserShareIsLagerThanOne(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "checkUserShareIsLagerThanOne(uint256)"(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    create(
      _title: PromiseOrValue<string>,
      arTxId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "create(string,string)"(
      _title: PromiseOrValue<string>,
      arTxId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Create(uint256,address,string)"(
      assetId?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      arTxId?: null
    ): CreateEventFilter;
    Create(
      assetId?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      arTxId?: null
    ): CreateEventFilter;

    "Remove(uint256,address)"(
      assetId?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null
    ): RemoveEventFilter;
    Remove(
      assetId?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null
    ): RemoveEventFilter;

    "Trade(uint8,uint256,address,uint256,uint256,uint256)"(
      tradeType?: PromiseOrValue<BigNumberish> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      tokenAmount?: null,
      ethAmount?: null,
      creatorFee?: null
    ): TradeEventFilter;
    Trade(
      tradeType?: PromiseOrValue<BigNumberish> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      tokenAmount?: null,
      ethAmount?: null,
      creatorFee?: null
    ): TradeEventFilter;
  };

  estimateGas: {
    checkUserShareIsLagerThanOne(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkUserShareIsLagerThanOne(uint256)"(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create(
      _title: PromiseOrValue<string>,
      arTxId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "create(string,string)"(
      _title: PromiseOrValue<string>,
      arTxId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkUserShareIsLagerThanOne(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkUserShareIsLagerThanOne(uint256)"(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    create(
      _title: PromiseOrValue<string>,
      arTxId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "create(string,string)"(
      _title: PromiseOrValue<string>,
      arTxId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
