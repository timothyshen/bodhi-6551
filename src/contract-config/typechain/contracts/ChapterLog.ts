/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ChapterLog {
  export type ChapterStruct = {
    title: PromiseOrValue<string>;
    content: PromiseOrValue<string>;
    author: PromiseOrValue<string>;
    remixes: PromiseOrValue<BigNumberish>;
    isRemix: PromiseOrValue<boolean>;
  };

  export type ChapterStructOutput = [
    string,
    string,
    string,
    number,
    boolean
  ] & {
    title: string;
    content: string;
    author: string;
    remixes: number;
    isRemix: boolean;
  };

  export type TippingStruct = {
    from: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    tippingTimes: PromiseOrValue<BigNumberish>;
  };

  export type TippingStructOutput = [string, BigNumber, BigNumber] & {
    from: string;
    amount: BigNumber;
    tippingTimes: BigNumber;
  };
}

export interface ChapterLogInterface extends utils.Interface {
  functions: {
    "MAX_REMIXES()": FunctionFragment;
    "chapterMap(uint256)": FunctionFragment;
    "chapters(uint256)": FunctionFragment;
    "createChapter(string,string,uint256)": FunctionFragment;
    "getChapter(uint256)": FunctionFragment;
    "getChapterCount()": FunctionFragment;
    "getChapterLog()": FunctionFragment;
    "getChapterTips(uint256)": FunctionFragment;
    "getRemixes(uint256)": FunctionFragment;
    "remixChapter(uint256,string,string)": FunctionFragment;
    "tipAuthor(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_REMIXES"
      | "MAX_REMIXES()"
      | "chapterMap"
      | "chapterMap(uint256)"
      | "chapters"
      | "chapters(uint256)"
      | "createChapter"
      | "createChapter(string,string,uint256)"
      | "getChapter"
      | "getChapter(uint256)"
      | "getChapterCount"
      | "getChapterCount()"
      | "getChapterLog"
      | "getChapterLog()"
      | "getChapterTips"
      | "getChapterTips(uint256)"
      | "getRemixes"
      | "getRemixes(uint256)"
      | "remixChapter"
      | "remixChapter(uint256,string,string)"
      | "tipAuthor"
      | "tipAuthor(uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_REMIXES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_REMIXES()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chapterMap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "chapterMap(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "chapters",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "chapters(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createChapter",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createChapter(string,string,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getChapter",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChapter(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChapterCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChapterCount()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChapterLog",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChapterLog()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChapterTips",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChapterTips(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemixes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemixes(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "remixChapter",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "remixChapter(uint256,string,string)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tipAuthor",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tipAuthor(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_REMIXES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REMIXES()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chapterMap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chapterMap(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chapters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chapters(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createChapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createChapter(string,string,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChapter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChapter(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChapterCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChapterCount()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChapterLog",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChapterLog()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChapterTips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChapterTips(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRemixes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRemixes(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remixChapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remixChapter(uint256,string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tipAuthor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tipAuthor(uint256)",
    data: BytesLike
  ): Result;

  events: {
    "AuthorTipped(uint256,address,uint256)": EventFragment;
    "ChapterCreated(uint256,address)": EventFragment;
    "ChapterRemixed(uint256,uint256,address)": EventFragment;
    "ChapterRemixed(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorTipped"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AuthorTipped(uint256,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChapterCreated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ChapterCreated(uint256,address)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ChapterRemixed(uint256,uint256,address)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ChapterRemixed(uint256,uint256)"
  ): EventFragment;
}

export interface AuthorTippedEventObject {
  chapterId: BigNumber;
  from: string;
  amount: BigNumber;
}
export type AuthorTippedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  AuthorTippedEventObject
>;

export type AuthorTippedEventFilter = TypedEventFilter<AuthorTippedEvent>;

export interface ChapterCreatedEventObject {
  chapterId: BigNumber;
  author: string;
}
export type ChapterCreatedEvent = TypedEvent<
  [BigNumber, string],
  ChapterCreatedEventObject
>;

export type ChapterCreatedEventFilter = TypedEventFilter<ChapterCreatedEvent>;

export interface ChapterRemixed_uint256_uint256_address_EventObject {
  originalChapterId: BigNumber;
  newChapterId: BigNumber;
  author: string;
}
export type ChapterRemixed_uint256_uint256_address_Event = TypedEvent<
  [BigNumber, BigNumber, string],
  ChapterRemixed_uint256_uint256_address_EventObject
>;

export type ChapterRemixed_uint256_uint256_address_EventFilter =
  TypedEventFilter<ChapterRemixed_uint256_uint256_address_Event>;

export interface ChapterRemixed_uint256_uint256_EventObject {
  originalChapterId: BigNumber;
  newChapterId: BigNumber;
}
export type ChapterRemixed_uint256_uint256_Event = TypedEvent<
  [BigNumber, BigNumber],
  ChapterRemixed_uint256_uint256_EventObject
>;

export type ChapterRemixed_uint256_uint256_EventFilter =
  TypedEventFilter<ChapterRemixed_uint256_uint256_Event>;

export interface ChapterLog extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChapterLogInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_REMIXES(overrides?: CallOverrides): Promise<[number]>;

    "MAX_REMIXES()"(overrides?: CallOverrides): Promise<[number]>;

    chapterMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, boolean] & {
        title: string;
        content: string;
        author: string;
        remixes: number;
        isRemix: boolean;
      }
    >;

    "chapterMap(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, boolean] & {
        title: string;
        content: string;
        author: string;
        remixes: number;
        isRemix: boolean;
      }
    >;

    chapters(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, boolean] & {
        title: string;
        content: string;
        author: string;
        remixes: number;
        isRemix: boolean;
      }
    >;

    "chapters(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, boolean] & {
        title: string;
        content: string;
        author: string;
        remixes: number;
        isRemix: boolean;
      }
    >;

    createChapter(
      _title: PromiseOrValue<string>,
      _content: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "createChapter(string,string,uint256)"(
      _title: PromiseOrValue<string>,
      _content: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getChapter(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ChapterLog.ChapterStructOutput]>;

    "getChapter(uint256)"(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ChapterLog.ChapterStructOutput]>;

    getChapterCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getChapterCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getChapterLog(
      overrides?: CallOverrides
    ): Promise<[ChapterLog.ChapterStructOutput[]]>;

    "getChapterLog()"(
      overrides?: CallOverrides
    ): Promise<[ChapterLog.ChapterStructOutput[]]>;

    getChapterTips(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ChapterLog.TippingStructOutput[]]>;

    "getChapterTips(uint256)"(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ChapterLog.TippingStructOutput[]]>;

    getRemixes(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "getRemixes(uint256)"(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    remixChapter(
      chapterId: PromiseOrValue<BigNumberish>,
      _title: PromiseOrValue<string>,
      _content: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "remixChapter(uint256,string,string)"(
      chapterId: PromiseOrValue<BigNumberish>,
      _title: PromiseOrValue<string>,
      _content: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tipAuthor(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "tipAuthor(uint256)"(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_REMIXES(overrides?: CallOverrides): Promise<number>;

  "MAX_REMIXES()"(overrides?: CallOverrides): Promise<number>;

  chapterMap(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, number, boolean] & {
      title: string;
      content: string;
      author: string;
      remixes: number;
      isRemix: boolean;
    }
  >;

  "chapterMap(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, number, boolean] & {
      title: string;
      content: string;
      author: string;
      remixes: number;
      isRemix: boolean;
    }
  >;

  chapters(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, number, boolean] & {
      title: string;
      content: string;
      author: string;
      remixes: number;
      isRemix: boolean;
    }
  >;

  "chapters(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, number, boolean] & {
      title: string;
      content: string;
      author: string;
      remixes: number;
      isRemix: boolean;
    }
  >;

  createChapter(
    _title: PromiseOrValue<string>,
    _content: PromiseOrValue<string>,
    assetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "createChapter(string,string,uint256)"(
    _title: PromiseOrValue<string>,
    _content: PromiseOrValue<string>,
    assetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getChapter(
    chapterId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ChapterLog.ChapterStructOutput>;

  "getChapter(uint256)"(
    chapterId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ChapterLog.ChapterStructOutput>;

  getChapterCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getChapterCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getChapterLog(
    overrides?: CallOverrides
  ): Promise<ChapterLog.ChapterStructOutput[]>;

  "getChapterLog()"(
    overrides?: CallOverrides
  ): Promise<ChapterLog.ChapterStructOutput[]>;

  getChapterTips(
    chapterId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ChapterLog.TippingStructOutput[]>;

  "getChapterTips(uint256)"(
    chapterId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ChapterLog.TippingStructOutput[]>;

  getRemixes(
    chapterId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getRemixes(uint256)"(
    chapterId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  remixChapter(
    chapterId: PromiseOrValue<BigNumberish>,
    _title: PromiseOrValue<string>,
    _content: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "remixChapter(uint256,string,string)"(
    chapterId: PromiseOrValue<BigNumberish>,
    _title: PromiseOrValue<string>,
    _content: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tipAuthor(
    chapterId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "tipAuthor(uint256)"(
    chapterId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_REMIXES(overrides?: CallOverrides): Promise<number>;

    "MAX_REMIXES()"(overrides?: CallOverrides): Promise<number>;

    chapterMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, boolean] & {
        title: string;
        content: string;
        author: string;
        remixes: number;
        isRemix: boolean;
      }
    >;

    "chapterMap(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, boolean] & {
        title: string;
        content: string;
        author: string;
        remixes: number;
        isRemix: boolean;
      }
    >;

    chapters(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, boolean] & {
        title: string;
        content: string;
        author: string;
        remixes: number;
        isRemix: boolean;
      }
    >;

    "chapters(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, boolean] & {
        title: string;
        content: string;
        author: string;
        remixes: number;
        isRemix: boolean;
      }
    >;

    createChapter(
      _title: PromiseOrValue<string>,
      _content: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "createChapter(string,string,uint256)"(
      _title: PromiseOrValue<string>,
      _content: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getChapter(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ChapterLog.ChapterStructOutput>;

    "getChapter(uint256)"(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ChapterLog.ChapterStructOutput>;

    getChapterCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getChapterCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getChapterLog(
      overrides?: CallOverrides
    ): Promise<ChapterLog.ChapterStructOutput[]>;

    "getChapterLog()"(
      overrides?: CallOverrides
    ): Promise<ChapterLog.ChapterStructOutput[]>;

    getChapterTips(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ChapterLog.TippingStructOutput[]>;

    "getChapterTips(uint256)"(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ChapterLog.TippingStructOutput[]>;

    getRemixes(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getRemixes(uint256)"(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    remixChapter(
      chapterId: PromiseOrValue<BigNumberish>,
      _title: PromiseOrValue<string>,
      _content: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "remixChapter(uint256,string,string)"(
      chapterId: PromiseOrValue<BigNumberish>,
      _title: PromiseOrValue<string>,
      _content: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    tipAuthor(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "tipAuthor(uint256)"(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AuthorTipped(uint256,address,uint256)"(
      chapterId?: null,
      from?: null,
      amount?: null
    ): AuthorTippedEventFilter;
    AuthorTipped(
      chapterId?: null,
      from?: null,
      amount?: null
    ): AuthorTippedEventFilter;

    "ChapterCreated(uint256,address)"(
      chapterId?: null,
      author?: null
    ): ChapterCreatedEventFilter;
    ChapterCreated(chapterId?: null, author?: null): ChapterCreatedEventFilter;

    "ChapterRemixed(uint256,uint256,address)"(
      originalChapterId?: null,
      newChapterId?: null,
      author?: null
    ): ChapterRemixed_uint256_uint256_address_EventFilter;
    "ChapterRemixed(uint256,uint256)"(
      originalChapterId?: null,
      newChapterId?: null
    ): ChapterRemixed_uint256_uint256_EventFilter;
  };

  estimateGas: {
    MAX_REMIXES(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_REMIXES()"(overrides?: CallOverrides): Promise<BigNumber>;

    chapterMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "chapterMap(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chapters(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "chapters(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createChapter(
      _title: PromiseOrValue<string>,
      _content: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "createChapter(string,string,uint256)"(
      _title: PromiseOrValue<string>,
      _content: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getChapter(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getChapter(uint256)"(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChapterCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getChapterCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getChapterLog(overrides?: CallOverrides): Promise<BigNumber>;

    "getChapterLog()"(overrides?: CallOverrides): Promise<BigNumber>;

    getChapterTips(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getChapterTips(uint256)"(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemixes(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRemixes(uint256)"(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remixChapter(
      chapterId: PromiseOrValue<BigNumberish>,
      _title: PromiseOrValue<string>,
      _content: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "remixChapter(uint256,string,string)"(
      chapterId: PromiseOrValue<BigNumberish>,
      _title: PromiseOrValue<string>,
      _content: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tipAuthor(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "tipAuthor(uint256)"(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_REMIXES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_REMIXES()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chapterMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "chapterMap(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chapters(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "chapters(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createChapter(
      _title: PromiseOrValue<string>,
      _content: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "createChapter(string,string,uint256)"(
      _title: PromiseOrValue<string>,
      _content: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getChapter(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getChapter(uint256)"(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChapterCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getChapterCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChapterLog(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getChapterLog()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChapterTips(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getChapterTips(uint256)"(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRemixes(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRemixes(uint256)"(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remixChapter(
      chapterId: PromiseOrValue<BigNumberish>,
      _title: PromiseOrValue<string>,
      _content: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "remixChapter(uint256,string,string)"(
      chapterId: PromiseOrValue<BigNumberish>,
      _title: PromiseOrValue<string>,
      _content: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tipAuthor(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "tipAuthor(uint256)"(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
