/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export type PILTermsStruct = {
  transferable: PromiseOrValue<boolean>;
  royaltyPolicy: PromiseOrValue<string>;
  mintingFee: PromiseOrValue<BigNumberish>;
  expiration: PromiseOrValue<BigNumberish>;
  commercialUse: PromiseOrValue<boolean>;
  commercialAttribution: PromiseOrValue<boolean>;
  commercializerChecker: PromiseOrValue<string>;
  commercializerCheckerData: PromiseOrValue<BytesLike>;
  commercialRevShare: PromiseOrValue<BigNumberish>;
  commercialRevCelling: PromiseOrValue<BigNumberish>;
  derivativesAllowed: PromiseOrValue<boolean>;
  derivativesAttribution: PromiseOrValue<boolean>;
  derivativesApproval: PromiseOrValue<boolean>;
  derivativesReciprocal: PromiseOrValue<boolean>;
  derivativeRevCelling: PromiseOrValue<BigNumberish>;
  currency: PromiseOrValue<string>;
  uri: PromiseOrValue<string>;
};

export type PILTermsStructOutput = [
  boolean,
  string,
  BigNumber,
  BigNumber,
  boolean,
  boolean,
  string,
  string,
  number,
  BigNumber,
  boolean,
  boolean,
  boolean,
  boolean,
  BigNumber,
  string,
  string
] & {
  transferable: boolean;
  royaltyPolicy: string;
  mintingFee: BigNumber;
  expiration: BigNumber;
  commercialUse: boolean;
  commercialAttribution: boolean;
  commercializerChecker: string;
  commercializerCheckerData: string;
  commercialRevShare: number;
  commercialRevCelling: BigNumber;
  derivativesAllowed: boolean;
  derivativesAttribution: boolean;
  derivativesApproval: boolean;
  derivativesReciprocal: boolean;
  derivativeRevCelling: BigNumber;
  currency: string;
  uri: string;
};

export interface PILicenseTemplateInterface extends utils.Interface {
  functions: {
    "ACCESS_CONTROLLER()": FunctionFragment;
    "IP_ACCOUNT_REGISTRY()": FunctionFragment;
    "LICENSE_REGISTRY()": FunctionFragment;
    "ROYALTY_MODULE()": FunctionFragment;
    "UPGRADE_INTERFACE_VERSION()": FunctionFragment;
    "authority()": FunctionFragment;
    "exists(uint256)": FunctionFragment;
    "getEarlierExpireTime(uint256[],uint256)": FunctionFragment;
    "getExpireTime(uint256,uint256)": FunctionFragment;
    "getLicenseTerms(uint256)": FunctionFragment;
    "getLicenseTermsId((bool,address,uint256,uint256,bool,bool,address,bytes,uint32,uint256,bool,bool,bool,bool,uint256,address,string))": FunctionFragment;
    "getLicenseTermsURI(uint256)": FunctionFragment;
    "getMetadataURI()": FunctionFragment;
    "getRoyaltyPolicy(uint256)": FunctionFragment;
    "initialize(address,string,string)": FunctionFragment;
    "isConsumingScheduledOp()": FunctionFragment;
    "isDerivativeApproved(address,uint256,address)": FunctionFragment;
    "isLicenseTransferable(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "registerLicenseTerms((bool,address,uint256,uint256,bool,bool,address,bytes,uint32,uint256,bool,bool,bool,bool,uint256,address,string))": FunctionFragment;
    "setApproval(address,uint256,address,bool)": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "toJson(uint256)": FunctionFragment;
    "totalRegisteredLicenseTerms()": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "verifyCompatibleLicenses(uint256[])": FunctionFragment;
    "verifyMintLicenseToken(uint256,address,address,uint256)": FunctionFragment;
    "verifyRegisterDerivative(address,address,uint256,address)": FunctionFragment;
    "verifyRegisterDerivativeForAllParents(address,address[],uint256[],address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ACCESS_CONTROLLER"
      | "ACCESS_CONTROLLER()"
      | "IP_ACCOUNT_REGISTRY"
      | "IP_ACCOUNT_REGISTRY()"
      | "LICENSE_REGISTRY"
      | "LICENSE_REGISTRY()"
      | "ROYALTY_MODULE"
      | "ROYALTY_MODULE()"
      | "UPGRADE_INTERFACE_VERSION"
      | "UPGRADE_INTERFACE_VERSION()"
      | "authority"
      | "authority()"
      | "exists"
      | "exists(uint256)"
      | "getEarlierExpireTime"
      | "getEarlierExpireTime(uint256[],uint256)"
      | "getExpireTime"
      | "getExpireTime(uint256,uint256)"
      | "getLicenseTerms"
      | "getLicenseTerms(uint256)"
      | "getLicenseTermsId"
      | "getLicenseTermsId((bool,address,uint256,uint256,bool,bool,address,bytes,uint32,uint256,bool,bool,bool,bool,uint256,address,string))"
      | "getLicenseTermsURI"
      | "getLicenseTermsURI(uint256)"
      | "getMetadataURI"
      | "getMetadataURI()"
      | "getRoyaltyPolicy"
      | "getRoyaltyPolicy(uint256)"
      | "initialize"
      | "initialize(address,string,string)"
      | "isConsumingScheduledOp"
      | "isConsumingScheduledOp()"
      | "isDerivativeApproved"
      | "isDerivativeApproved(address,uint256,address)"
      | "isLicenseTransferable"
      | "isLicenseTransferable(uint256)"
      | "name"
      | "name()"
      | "proxiableUUID"
      | "proxiableUUID()"
      | "registerLicenseTerms"
      | "registerLicenseTerms((bool,address,uint256,uint256,bool,bool,address,bytes,uint32,uint256,bool,bool,bool,bool,uint256,address,string))"
      | "setApproval"
      | "setApproval(address,uint256,address,bool)"
      | "setAuthority"
      | "setAuthority(address)"
      | "supportsInterface"
      | "supportsInterface(bytes4)"
      | "toJson"
      | "toJson(uint256)"
      | "totalRegisteredLicenseTerms"
      | "totalRegisteredLicenseTerms()"
      | "upgradeToAndCall"
      | "upgradeToAndCall(address,bytes)"
      | "verifyCompatibleLicenses"
      | "verifyCompatibleLicenses(uint256[])"
      | "verifyMintLicenseToken"
      | "verifyMintLicenseToken(uint256,address,address,uint256)"
      | "verifyRegisterDerivative"
      | "verifyRegisterDerivative(address,address,uint256,address)"
      | "verifyRegisterDerivativeForAllParents"
      | "verifyRegisterDerivativeForAllParents(address,address[],uint256[],address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ACCESS_CONTROLLER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ACCESS_CONTROLLER()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IP_ACCOUNT_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IP_ACCOUNT_REGISTRY()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LICENSE_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LICENSE_REGISTRY()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROYALTY_MODULE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROYALTY_MODULE()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "authority()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exists(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEarlierExpireTime",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEarlierExpireTime(uint256[],uint256)",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpireTime",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpireTime(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLicenseTerms",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLicenseTerms(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLicenseTermsId",
    values: [PILTermsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getLicenseTermsId((bool,address,uint256,uint256,bool,bool,address,bytes,uint32,uint256,bool,bool,bool,bool,uint256,address,string))",
    values: [PILTermsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getLicenseTermsURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLicenseTermsURI(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadataURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadataURI()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyPolicy",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyPolicy(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize(address,string,string)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isConsumingScheduledOp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isConsumingScheduledOp()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDerivativeApproved",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isDerivativeApproved(address,uint256,address)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isLicenseTransferable",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isLicenseTransferable(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "name()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerLicenseTerms",
    values: [PILTermsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "registerLicenseTerms((bool,address,uint256,uint256,bool,bool,address,bytes,uint32,uint256,bool,bool,bool,bool,uint256,address,string))",
    values: [PILTermsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setApproval",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApproval(address,uint256,address,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthority(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface(bytes4)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "toJson",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "toJson(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRegisteredLicenseTerms",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRegisteredLicenseTerms()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall(address,bytes)",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyCompatibleLicenses",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyCompatibleLicenses(uint256[])",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMintLicenseToken",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMintLicenseToken(uint256,address,address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyRegisterDerivative",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyRegisterDerivative(address,address,uint256,address)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyRegisterDerivativeForAllParents",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyRegisterDerivativeForAllParents(address,address[],uint256[],address)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "ACCESS_CONTROLLER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ACCESS_CONTROLLER()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IP_ACCOUNT_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IP_ACCOUNT_REGISTRY()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LICENSE_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LICENSE_REGISTRY()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROYALTY_MODULE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROYALTY_MODULE()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authority()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exists(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEarlierExpireTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEarlierExpireTime(uint256[],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpireTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpireTime(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLicenseTerms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLicenseTerms(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLicenseTermsId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLicenseTermsId((bool,address,uint256,uint256,bool,bool,address,bytes,uint32,uint256,bool,bool,bool,bool,uint256,address,string))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLicenseTermsURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLicenseTermsURI(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetadataURI()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyPolicy(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialize(address,string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isConsumingScheduledOp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isConsumingScheduledOp()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDerivativeApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDerivativeApproved(address,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLicenseTransferable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLicenseTransferable(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerLicenseTerms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerLicenseTerms((bool,address,uint256,uint256,bool,bool,address,bytes,uint32,uint256,bool,bool,bool,bool,uint256,address,string))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApproval(address,uint256,address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toJson", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toJson(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRegisteredLicenseTerms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRegisteredLicenseTerms()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall(address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyCompatibleLicenses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyCompatibleLicenses(uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMintLicenseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMintLicenseToken(uint256,address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyRegisterDerivative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyRegisterDerivative(address,address,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyRegisterDerivativeForAllParents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyRegisterDerivativeForAllParents(address,address[],uint256[],address)",
    data: BytesLike
  ): Result;

  events: {
    "AuthorityUpdated(address)": EventFragment;
    "DerivativeApproved(uint256,address,address,bool)": EventFragment;
    "Initialized(uint64)": EventFragment;
    "LicenseTermsRegistered(uint256,address,bytes)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated(address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DerivativeApproved"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DerivativeApproved(uint256,address,address,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized(uint64)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LicenseTermsRegistered"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LicenseTermsRegistered(uint256,address,bytes)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded(address)"): EventFragment;
}

export interface AuthorityUpdatedEventObject {
  authority: string;
}
export type AuthorityUpdatedEvent = TypedEvent<
  [string],
  AuthorityUpdatedEventObject
>;

export type AuthorityUpdatedEventFilter =
  TypedEventFilter<AuthorityUpdatedEvent>;

export interface DerivativeApprovedEventObject {
  licenseTermsId: BigNumber;
  ipId: string;
  caller: string;
  approved: boolean;
}
export type DerivativeApprovedEvent = TypedEvent<
  [BigNumber, string, string, boolean],
  DerivativeApprovedEventObject
>;

export type DerivativeApprovedEventFilter =
  TypedEventFilter<DerivativeApprovedEvent>;

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LicenseTermsRegisteredEventObject {
  licenseTermsId: BigNumber;
  licenseTemplate: string;
  licenseTerms: string;
}
export type LicenseTermsRegisteredEvent = TypedEvent<
  [BigNumber, string, string],
  LicenseTermsRegisteredEventObject
>;

export type LicenseTermsRegisteredEventFilter =
  TypedEventFilter<LicenseTermsRegisteredEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface PILicenseTemplate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PILicenseTemplateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ACCESS_CONTROLLER(overrides?: CallOverrides): Promise<[string]>;

    "ACCESS_CONTROLLER()"(overrides?: CallOverrides): Promise<[string]>;

    IP_ACCOUNT_REGISTRY(overrides?: CallOverrides): Promise<[string]>;

    "IP_ACCOUNT_REGISTRY()"(overrides?: CallOverrides): Promise<[string]>;

    LICENSE_REGISTRY(overrides?: CallOverrides): Promise<[string]>;

    "LICENSE_REGISTRY()"(overrides?: CallOverrides): Promise<[string]>;

    ROYALTY_MODULE(overrides?: CallOverrides): Promise<[string]>;

    "ROYALTY_MODULE()"(overrides?: CallOverrides): Promise<[string]>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<[string]>;

    "UPGRADE_INTERFACE_VERSION()"(overrides?: CallOverrides): Promise<[string]>;

    authority(overrides?: CallOverrides): Promise<[string]>;

    "authority()"(overrides?: CallOverrides): Promise<[string]>;

    exists(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "exists(uint256)"(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getEarlierExpireTime(
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      start: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getEarlierExpireTime(uint256[],uint256)"(
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      start: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getExpireTime(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      start: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getExpireTime(uint256,uint256)"(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      start: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLicenseTerms(
      selectedLicenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[PILTermsStructOutput] & { terms: PILTermsStructOutput }>;

    "getLicenseTerms(uint256)"(
      selectedLicenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[PILTermsStructOutput] & { terms: PILTermsStructOutput }>;

    getLicenseTermsId(
      terms: PILTermsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { selectedLicenseTermsId: BigNumber }>;

    "getLicenseTermsId((bool,address,uint256,uint256,bool,bool,address,bytes,uint32,uint256,bool,bool,bool,bool,uint256,address,string))"(
      terms: PILTermsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { selectedLicenseTermsId: BigNumber }>;

    getLicenseTermsURI(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getLicenseTermsURI(uint256)"(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMetadataURI(overrides?: CallOverrides): Promise<[string]>;

    "getMetadataURI()"(overrides?: CallOverrides): Promise<[string]>;

    getRoyaltyPolicy(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string] & {
        royaltyPolicy: string;
        royaltyData: string;
        mintingFee: BigNumber;
        currency: string;
      }
    >;

    "getRoyaltyPolicy(uint256)"(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string] & {
        royaltyPolicy: string;
        royaltyData: string;
        mintingFee: BigNumber;
        currency: string;
      }
    >;

    initialize(
      accessManager: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      metadataURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,string,string)"(
      accessManager: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      metadataURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isConsumingScheduledOp(overrides?: CallOverrides): Promise<[string]>;

    "isConsumingScheduledOp()"(overrides?: CallOverrides): Promise<[string]>;

    isDerivativeApproved(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isDerivativeApproved(address,uint256,address)"(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isLicenseTransferable(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isLicenseTransferable(uint256)"(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<[string]>;

    registerLicenseTerms(
      terms: PILTermsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerLicenseTerms((bool,address,uint256,uint256,bool,bool,address,bytes,uint32,uint256,bool,bool,bool,bool,uint256,address,string))"(
      terms: PILTermsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApproval(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setApproval(address,uint256,address,bool)"(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setAuthority(address)"(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    toJson(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "toJson(uint256)"(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalRegisteredLicenseTerms(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalRegisteredLicenseTerms()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyCompatibleLicenses(
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "verifyCompatibleLicenses(uint256[])"(
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyMintLicenseToken(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      licensee: PromiseOrValue<string>,
      licensorIpId: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "verifyMintLicenseToken(uint256,address,address,uint256)"(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      licensee: PromiseOrValue<string>,
      licensorIpId: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyRegisterDerivative(
      childIpId: PromiseOrValue<string>,
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      licensee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "verifyRegisterDerivative(address,address,uint256,address)"(
      childIpId: PromiseOrValue<string>,
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      licensee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyRegisterDerivativeForAllParents(
      childIpId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      childIpOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "verifyRegisterDerivativeForAllParents(address,address[],uint256[],address)"(
      childIpId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      childIpOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ACCESS_CONTROLLER(overrides?: CallOverrides): Promise<string>;

  "ACCESS_CONTROLLER()"(overrides?: CallOverrides): Promise<string>;

  IP_ACCOUNT_REGISTRY(overrides?: CallOverrides): Promise<string>;

  "IP_ACCOUNT_REGISTRY()"(overrides?: CallOverrides): Promise<string>;

  LICENSE_REGISTRY(overrides?: CallOverrides): Promise<string>;

  "LICENSE_REGISTRY()"(overrides?: CallOverrides): Promise<string>;

  ROYALTY_MODULE(overrides?: CallOverrides): Promise<string>;

  "ROYALTY_MODULE()"(overrides?: CallOverrides): Promise<string>;

  UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

  "UPGRADE_INTERFACE_VERSION()"(overrides?: CallOverrides): Promise<string>;

  authority(overrides?: CallOverrides): Promise<string>;

  "authority()"(overrides?: CallOverrides): Promise<string>;

  exists(
    licenseTermsId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "exists(uint256)"(
    licenseTermsId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getEarlierExpireTime(
    licenseTermsIds: PromiseOrValue<BigNumberish>[],
    start: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getEarlierExpireTime(uint256[],uint256)"(
    licenseTermsIds: PromiseOrValue<BigNumberish>[],
    start: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getExpireTime(
    licenseTermsId: PromiseOrValue<BigNumberish>,
    start: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getExpireTime(uint256,uint256)"(
    licenseTermsId: PromiseOrValue<BigNumberish>,
    start: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLicenseTerms(
    selectedLicenseTermsId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<PILTermsStructOutput>;

  "getLicenseTerms(uint256)"(
    selectedLicenseTermsId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<PILTermsStructOutput>;

  getLicenseTermsId(
    terms: PILTermsStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getLicenseTermsId((bool,address,uint256,uint256,bool,bool,address,bytes,uint32,uint256,bool,bool,bool,bool,uint256,address,string))"(
    terms: PILTermsStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLicenseTermsURI(
    licenseTermsId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getLicenseTermsURI(uint256)"(
    licenseTermsId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getMetadataURI(overrides?: CallOverrides): Promise<string>;

  "getMetadataURI()"(overrides?: CallOverrides): Promise<string>;

  getRoyaltyPolicy(
    licenseTermsId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string] & {
      royaltyPolicy: string;
      royaltyData: string;
      mintingFee: BigNumber;
      currency: string;
    }
  >;

  "getRoyaltyPolicy(uint256)"(
    licenseTermsId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string] & {
      royaltyPolicy: string;
      royaltyData: string;
      mintingFee: BigNumber;
      currency: string;
    }
  >;

  initialize(
    accessManager: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    metadataURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,string,string)"(
    accessManager: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    metadataURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isConsumingScheduledOp(overrides?: CallOverrides): Promise<string>;

  "isConsumingScheduledOp()"(overrides?: CallOverrides): Promise<string>;

  isDerivativeApproved(
    parentIpId: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    childIpId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isDerivativeApproved(address,uint256,address)"(
    parentIpId: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    childIpId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isLicenseTransferable(
    licenseTermsId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isLicenseTransferable(uint256)"(
    licenseTermsId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

  registerLicenseTerms(
    terms: PILTermsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerLicenseTerms((bool,address,uint256,uint256,bool,bool,address,bytes,uint32,uint256,bool,bool,bool,bool,uint256,address,string))"(
    terms: PILTermsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApproval(
    parentIpId: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    childIpId: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setApproval(address,uint256,address,bool)"(
    parentIpId: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    childIpId: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAuthority(
    newAuthority: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setAuthority(address)"(
    newAuthority: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  toJson(
    licenseTermsId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "toJson(uint256)"(
    licenseTermsId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  totalRegisteredLicenseTerms(overrides?: CallOverrides): Promise<BigNumber>;

  "totalRegisteredLicenseTerms()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "upgradeToAndCall(address,bytes)"(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyCompatibleLicenses(
    licenseTermsIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "verifyCompatibleLicenses(uint256[])"(
    licenseTermsIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyMintLicenseToken(
    licenseTermsId: PromiseOrValue<BigNumberish>,
    licensee: PromiseOrValue<string>,
    licensorIpId: PromiseOrValue<string>,
    arg3: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "verifyMintLicenseToken(uint256,address,address,uint256)"(
    licenseTermsId: PromiseOrValue<BigNumberish>,
    licensee: PromiseOrValue<string>,
    licensorIpId: PromiseOrValue<string>,
    arg3: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyRegisterDerivative(
    childIpId: PromiseOrValue<string>,
    parentIpId: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    licensee: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "verifyRegisterDerivative(address,address,uint256,address)"(
    childIpId: PromiseOrValue<string>,
    parentIpId: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    licensee: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyRegisterDerivativeForAllParents(
    childIpId: PromiseOrValue<string>,
    parentIpIds: PromiseOrValue<string>[],
    licenseTermsIds: PromiseOrValue<BigNumberish>[],
    childIpOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "verifyRegisterDerivativeForAllParents(address,address[],uint256[],address)"(
    childIpId: PromiseOrValue<string>,
    parentIpIds: PromiseOrValue<string>[],
    licenseTermsIds: PromiseOrValue<BigNumberish>[],
    childIpOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ACCESS_CONTROLLER(overrides?: CallOverrides): Promise<string>;

    "ACCESS_CONTROLLER()"(overrides?: CallOverrides): Promise<string>;

    IP_ACCOUNT_REGISTRY(overrides?: CallOverrides): Promise<string>;

    "IP_ACCOUNT_REGISTRY()"(overrides?: CallOverrides): Promise<string>;

    LICENSE_REGISTRY(overrides?: CallOverrides): Promise<string>;

    "LICENSE_REGISTRY()"(overrides?: CallOverrides): Promise<string>;

    ROYALTY_MODULE(overrides?: CallOverrides): Promise<string>;

    "ROYALTY_MODULE()"(overrides?: CallOverrides): Promise<string>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

    "UPGRADE_INTERFACE_VERSION()"(overrides?: CallOverrides): Promise<string>;

    authority(overrides?: CallOverrides): Promise<string>;

    "authority()"(overrides?: CallOverrides): Promise<string>;

    exists(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "exists(uint256)"(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getEarlierExpireTime(
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      start: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEarlierExpireTime(uint256[],uint256)"(
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      start: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExpireTime(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      start: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getExpireTime(uint256,uint256)"(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      start: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLicenseTerms(
      selectedLicenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PILTermsStructOutput>;

    "getLicenseTerms(uint256)"(
      selectedLicenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PILTermsStructOutput>;

    getLicenseTermsId(
      terms: PILTermsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLicenseTermsId((bool,address,uint256,uint256,bool,bool,address,bytes,uint32,uint256,bool,bool,bool,bool,uint256,address,string))"(
      terms: PILTermsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLicenseTermsURI(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getLicenseTermsURI(uint256)"(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getMetadataURI(overrides?: CallOverrides): Promise<string>;

    "getMetadataURI()"(overrides?: CallOverrides): Promise<string>;

    getRoyaltyPolicy(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string] & {
        royaltyPolicy: string;
        royaltyData: string;
        mintingFee: BigNumber;
        currency: string;
      }
    >;

    "getRoyaltyPolicy(uint256)"(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string] & {
        royaltyPolicy: string;
        royaltyData: string;
        mintingFee: BigNumber;
        currency: string;
      }
    >;

    initialize(
      accessManager: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      metadataURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,string,string)"(
      accessManager: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      metadataURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isConsumingScheduledOp(overrides?: CallOverrides): Promise<string>;

    "isConsumingScheduledOp()"(overrides?: CallOverrides): Promise<string>;

    isDerivativeApproved(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isDerivativeApproved(address,uint256,address)"(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLicenseTransferable(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isLicenseTransferable(uint256)"(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

    registerLicenseTerms(
      terms: PILTermsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "registerLicenseTerms((bool,address,uint256,uint256,bool,bool,address,bytes,uint32,uint256,bool,bool,bool,bool,uint256,address,string))"(
      terms: PILTermsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setApproval(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApproval(address,uint256,address,bool)"(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAuthority(address)"(
      newAuthority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    toJson(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "toJson(uint256)"(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    totalRegisteredLicenseTerms(overrides?: CallOverrides): Promise<BigNumber>;

    "totalRegisteredLicenseTerms()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyCompatibleLicenses(
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verifyCompatibleLicenses(uint256[])"(
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyMintLicenseToken(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      licensee: PromiseOrValue<string>,
      licensorIpId: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verifyMintLicenseToken(uint256,address,address,uint256)"(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      licensee: PromiseOrValue<string>,
      licensorIpId: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyRegisterDerivative(
      childIpId: PromiseOrValue<string>,
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      licensee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verifyRegisterDerivative(address,address,uint256,address)"(
      childIpId: PromiseOrValue<string>,
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      licensee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyRegisterDerivativeForAllParents(
      childIpId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      childIpOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verifyRegisterDerivativeForAllParents(address,address[],uint256[],address)"(
      childIpId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      childIpOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AuthorityUpdated(address)"(authority?: null): AuthorityUpdatedEventFilter;
    AuthorityUpdated(authority?: null): AuthorityUpdatedEventFilter;

    "DerivativeApproved(uint256,address,address,bool)"(
      licenseTermsId?: PromiseOrValue<BigNumberish> | null,
      ipId?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      approved?: null
    ): DerivativeApprovedEventFilter;
    DerivativeApproved(
      licenseTermsId?: PromiseOrValue<BigNumberish> | null,
      ipId?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      approved?: null
    ): DerivativeApprovedEventFilter;

    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LicenseTermsRegistered(uint256,address,bytes)"(
      licenseTermsId?: PromiseOrValue<BigNumberish> | null,
      licenseTemplate?: PromiseOrValue<string> | null,
      licenseTerms?: null
    ): LicenseTermsRegisteredEventFilter;
    LicenseTermsRegistered(
      licenseTermsId?: PromiseOrValue<BigNumberish> | null,
      licenseTemplate?: PromiseOrValue<string> | null,
      licenseTerms?: null
    ): LicenseTermsRegisteredEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    ACCESS_CONTROLLER(overrides?: CallOverrides): Promise<BigNumber>;

    "ACCESS_CONTROLLER()"(overrides?: CallOverrides): Promise<BigNumber>;

    IP_ACCOUNT_REGISTRY(overrides?: CallOverrides): Promise<BigNumber>;

    "IP_ACCOUNT_REGISTRY()"(overrides?: CallOverrides): Promise<BigNumber>;

    LICENSE_REGISTRY(overrides?: CallOverrides): Promise<BigNumber>;

    "LICENSE_REGISTRY()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROYALTY_MODULE(overrides?: CallOverrides): Promise<BigNumber>;

    "ROYALTY_MODULE()"(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    "UPGRADE_INTERFACE_VERSION()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    "authority()"(overrides?: CallOverrides): Promise<BigNumber>;

    exists(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exists(uint256)"(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEarlierExpireTime(
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      start: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEarlierExpireTime(uint256[],uint256)"(
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      start: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExpireTime(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      start: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getExpireTime(uint256,uint256)"(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      start: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLicenseTerms(
      selectedLicenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLicenseTerms(uint256)"(
      selectedLicenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLicenseTermsId(
      terms: PILTermsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLicenseTermsId((bool,address,uint256,uint256,bool,bool,address,bytes,uint32,uint256,bool,bool,bool,bool,uint256,address,string))"(
      terms: PILTermsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLicenseTermsURI(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLicenseTermsURI(uint256)"(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMetadataURI(overrides?: CallOverrides): Promise<BigNumber>;

    "getMetadataURI()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRoyaltyPolicy(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoyaltyPolicy(uint256)"(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      accessManager: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      metadataURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "initialize(address,string,string)"(
      accessManager: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      metadataURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isConsumingScheduledOp(overrides?: CallOverrides): Promise<BigNumber>;

    "isConsumingScheduledOp()"(overrides?: CallOverrides): Promise<BigNumber>;

    isDerivativeApproved(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isDerivativeApproved(address,uint256,address)"(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLicenseTransferable(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isLicenseTransferable(uint256)"(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<BigNumber>;

    registerLicenseTerms(
      terms: PILTermsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerLicenseTerms((bool,address,uint256,uint256,bool,bool,address,bytes,uint32,uint256,bool,bool,bool,bool,uint256,address,string))"(
      terms: PILTermsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApproval(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setApproval(address,uint256,address,bool)"(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setAuthority(address)"(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toJson(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toJson(uint256)"(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalRegisteredLicenseTerms(overrides?: CallOverrides): Promise<BigNumber>;

    "totalRegisteredLicenseTerms()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyCompatibleLicenses(
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verifyCompatibleLicenses(uint256[])"(
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyMintLicenseToken(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      licensee: PromiseOrValue<string>,
      licensorIpId: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "verifyMintLicenseToken(uint256,address,address,uint256)"(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      licensee: PromiseOrValue<string>,
      licensorIpId: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyRegisterDerivative(
      childIpId: PromiseOrValue<string>,
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      licensee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "verifyRegisterDerivative(address,address,uint256,address)"(
      childIpId: PromiseOrValue<string>,
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      licensee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyRegisterDerivativeForAllParents(
      childIpId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      childIpOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "verifyRegisterDerivativeForAllParents(address,address[],uint256[],address)"(
      childIpId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      childIpOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ACCESS_CONTROLLER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ACCESS_CONTROLLER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IP_ACCOUNT_REGISTRY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "IP_ACCOUNT_REGISTRY()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LICENSE_REGISTRY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "LICENSE_REGISTRY()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROYALTY_MODULE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ROYALTY_MODULE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UPGRADE_INTERFACE_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "UPGRADE_INTERFACE_VERSION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "authority()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exists(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exists(uint256)"(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEarlierExpireTime(
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      start: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEarlierExpireTime(uint256[],uint256)"(
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      start: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExpireTime(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      start: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getExpireTime(uint256,uint256)"(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      start: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLicenseTerms(
      selectedLicenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLicenseTerms(uint256)"(
      selectedLicenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLicenseTermsId(
      terms: PILTermsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLicenseTermsId((bool,address,uint256,uint256,bool,bool,address,bytes,uint32,uint256,bool,bool,bool,bool,uint256,address,string))"(
      terms: PILTermsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLicenseTermsURI(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLicenseTermsURI(uint256)"(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMetadataURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMetadataURI()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoyaltyPolicy(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoyaltyPolicy(uint256)"(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      accessManager: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      metadataURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,string,string)"(
      accessManager: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      metadataURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isConsumingScheduledOp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isConsumingScheduledOp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDerivativeApproved(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isDerivativeApproved(address,uint256,address)"(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLicenseTransferable(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isLicenseTransferable(uint256)"(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerLicenseTerms(
      terms: PILTermsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerLicenseTerms((bool,address,uint256,uint256,bool,bool,address,bytes,uint32,uint256,bool,bool,bool,bool,uint256,address,string))"(
      terms: PILTermsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApproval(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setApproval(address,uint256,address,bool)"(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setAuthority(address)"(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toJson(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toJson(uint256)"(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalRegisteredLicenseTerms(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalRegisteredLicenseTerms()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyCompatibleLicenses(
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verifyCompatibleLicenses(uint256[])"(
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyMintLicenseToken(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      licensee: PromiseOrValue<string>,
      licensorIpId: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "verifyMintLicenseToken(uint256,address,address,uint256)"(
      licenseTermsId: PromiseOrValue<BigNumberish>,
      licensee: PromiseOrValue<string>,
      licensorIpId: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyRegisterDerivative(
      childIpId: PromiseOrValue<string>,
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      licensee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "verifyRegisterDerivative(address,address,uint256,address)"(
      childIpId: PromiseOrValue<string>,
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      licensee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyRegisterDerivativeForAllParents(
      childIpId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      childIpOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "verifyRegisterDerivativeForAllParents(address,address[],uint256[],address)"(
      childIpId: PromiseOrValue<string>,
      parentIpIds: PromiseOrValue<string>[],
      licenseTermsIds: PromiseOrValue<BigNumberish>[],
      childIpOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
