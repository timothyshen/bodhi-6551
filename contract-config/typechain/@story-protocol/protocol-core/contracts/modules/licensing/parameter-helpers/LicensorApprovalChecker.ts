/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export interface LicensorApprovalCheckerInterface extends utils.Interface {
  functions: {
    "ACCESS_CONTROLLER()": FunctionFragment;
    "IP_ACCOUNT_REGISTRY()": FunctionFragment;
    "isDerivativeApproved(address,uint256,address)": FunctionFragment;
    "setApproval(address,uint256,address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ACCESS_CONTROLLER"
      | "ACCESS_CONTROLLER()"
      | "IP_ACCOUNT_REGISTRY"
      | "IP_ACCOUNT_REGISTRY()"
      | "isDerivativeApproved"
      | "isDerivativeApproved(address,uint256,address)"
      | "setApproval"
      | "setApproval(address,uint256,address,bool)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ACCESS_CONTROLLER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ACCESS_CONTROLLER()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IP_ACCOUNT_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IP_ACCOUNT_REGISTRY()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDerivativeApproved",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isDerivativeApproved(address,uint256,address)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApproval",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApproval(address,uint256,address,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "ACCESS_CONTROLLER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ACCESS_CONTROLLER()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IP_ACCOUNT_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IP_ACCOUNT_REGISTRY()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDerivativeApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDerivativeApproved(address,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApproval(address,uint256,address,bool)",
    data: BytesLike
  ): Result;

  events: {
    "DerivativeApproved(uint256,address,address,bool)": EventFragment;
    "Initialized(uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DerivativeApproved"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DerivativeApproved(uint256,address,address,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized(uint64)"): EventFragment;
}

export interface DerivativeApprovedEventObject {
  licenseTermsId: BigNumber;
  ipId: string;
  caller: string;
  approved: boolean;
}
export type DerivativeApprovedEvent = TypedEvent<
  [BigNumber, string, string, boolean],
  DerivativeApprovedEventObject
>;

export type DerivativeApprovedEventFilter =
  TypedEventFilter<DerivativeApprovedEvent>;

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LicensorApprovalChecker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LicensorApprovalCheckerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ACCESS_CONTROLLER(overrides?: CallOverrides): Promise<[string]>;

    "ACCESS_CONTROLLER()"(overrides?: CallOverrides): Promise<[string]>;

    IP_ACCOUNT_REGISTRY(overrides?: CallOverrides): Promise<[string]>;

    "IP_ACCOUNT_REGISTRY()"(overrides?: CallOverrides): Promise<[string]>;

    isDerivativeApproved(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isDerivativeApproved(address,uint256,address)"(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setApproval(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setApproval(address,uint256,address,bool)"(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ACCESS_CONTROLLER(overrides?: CallOverrides): Promise<string>;

  "ACCESS_CONTROLLER()"(overrides?: CallOverrides): Promise<string>;

  IP_ACCOUNT_REGISTRY(overrides?: CallOverrides): Promise<string>;

  "IP_ACCOUNT_REGISTRY()"(overrides?: CallOverrides): Promise<string>;

  isDerivativeApproved(
    parentIpId: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    childIpId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isDerivativeApproved(address,uint256,address)"(
    parentIpId: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    childIpId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setApproval(
    parentIpId: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    childIpId: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setApproval(address,uint256,address,bool)"(
    parentIpId: PromiseOrValue<string>,
    licenseTermsId: PromiseOrValue<BigNumberish>,
    childIpId: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ACCESS_CONTROLLER(overrides?: CallOverrides): Promise<string>;

    "ACCESS_CONTROLLER()"(overrides?: CallOverrides): Promise<string>;

    IP_ACCOUNT_REGISTRY(overrides?: CallOverrides): Promise<string>;

    "IP_ACCOUNT_REGISTRY()"(overrides?: CallOverrides): Promise<string>;

    isDerivativeApproved(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isDerivativeApproved(address,uint256,address)"(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setApproval(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApproval(address,uint256,address,bool)"(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DerivativeApproved(uint256,address,address,bool)"(
      licenseTermsId?: PromiseOrValue<BigNumberish> | null,
      ipId?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      approved?: null
    ): DerivativeApprovedEventFilter;
    DerivativeApproved(
      licenseTermsId?: PromiseOrValue<BigNumberish> | null,
      ipId?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      approved?: null
    ): DerivativeApprovedEventFilter;

    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    ACCESS_CONTROLLER(overrides?: CallOverrides): Promise<BigNumber>;

    "ACCESS_CONTROLLER()"(overrides?: CallOverrides): Promise<BigNumber>;

    IP_ACCOUNT_REGISTRY(overrides?: CallOverrides): Promise<BigNumber>;

    "IP_ACCOUNT_REGISTRY()"(overrides?: CallOverrides): Promise<BigNumber>;

    isDerivativeApproved(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isDerivativeApproved(address,uint256,address)"(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setApproval(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setApproval(address,uint256,address,bool)"(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ACCESS_CONTROLLER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ACCESS_CONTROLLER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IP_ACCOUNT_REGISTRY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "IP_ACCOUNT_REGISTRY()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDerivativeApproved(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isDerivativeApproved(address,uint256,address)"(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setApproval(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setApproval(address,uint256,address,bool)"(
      parentIpId: PromiseOrValue<string>,
      licenseTermsId: PromiseOrValue<BigNumberish>,
      childIpId: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
